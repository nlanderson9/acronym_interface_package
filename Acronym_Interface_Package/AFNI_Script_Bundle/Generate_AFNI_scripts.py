####################################################################################################################
# ===AFNI Script Generator=== #

# ===Part of the Acronym Interface Package===#
####################################################################################################################

from Tkinter import *
import math, os, subprocess, csv


"""
This script is designed to be flexible and can easily be adapted to different individuals and projects.
All unique information is entered by dialog boxes (radiobuttons, text entry, etc) generated by the script.
Additionally, all unique information is then saved in "presets" files to make speed later data entry.

Currently, this script is capable of doing the following:
-Creating AFNI preprocessing scripts
-Creating AFNI GLM scripts
-Creating AFNI t-test scripts
-Backing these scripts up to Icarus

For a visual overview, see the "Acronym_Interface_Package_overview.pdf"

This script strives to be consistent with the current BIDS specification: *** version 1.0.2 ***
(http://bids.neuroimaging.io/)


Important notes:

This script makes use of "templates" for generating preprocessing and GLM scripts (aptly named
"preprocessing_tenplate.txt" and "glm_template.txt". These files store the basic structure of an AFNI preprocessing or
GLM script, according to decisions made by the MCL lab regarding best practices and decision points.
Generate_AFNI_scripts.py will then take your input for your particular needs, and insert those parameters into the
template at the appropriate points in order to create a full AFNI script that can be run.

IF YOU WANT TO CHANGE A TEMPLATE:
1. If you want to change a part of the template that applies to all scripts, you may simply change the txt file.
2. If you want to add a variable that will be inserted by Generate_AFNI_Scripts.py (appearing in the template as 
   $$%%variable_name%%$$), you will have to modify both the template and this script. Please make sure you understand
   what you are doing before attempting this!
3. Of course, you can always use Generate_AFNI_Scripts.py to create an AFNI script, and then manually make changes to
   the resulting script before running it.
   

If you use the AFNI tool "uber_subject.py", it is the equivalent of creating a script that includes preprocessing + a
single GLM. The purpose of Generate_AFNI_Scripts.py is to allow you to run multiple GLMs without the need to repeatedly
re-preprocess your data. This means a preprocessing script MUST be run before any GLM scripts can be run.


This script will allow you to create scripts in two modes:
-Manual: pop-up windows will appear, asking you to input parameters and information. A single script will be created at
         the end. This mode can be used for preprocessing, GLM, and t-test scripts.
-Auto:   parameters and information will be drawn from a formatted spreadsheet (.csv). For GLMs, the number of scripts
         created will be determined by the number of rows in the spreadsheet; for t-tests, a single script will be
         created that contains as many t-tests as there are rows in the spreadsheet (which will be run sequentially
         when the script is executed). This mode can be used for GLM and t-test scripts.


For the spreadsheet to provide input for Auto GLM mode, you may add as many timing files or GLTs as you wish, as long
as you follow the format/pattern in the spreadsheet.

"""

####################################################################################################
####################################################################################################
'''In order to back up data to Icarus, you will need to install sshpass.
Instructions can be found here:
https://sourceforge.net/projects/sshpass/

sshpass must be installed in /usr/local/bin/

***NOTE***
If you are running this script on Pegasus, sshpass has already been installed.

'''
####################################################################################################
####################################################################################################
# Set up necessary paths

path = os.path.dirname(os.path.realpath(__file__)) # this script's directory path

presets_control_file = path + "/presets_control_file.txt"

preprocessing_presets_control_file = path + "/preprocessing_presets_control_file.txt"
glm_presets_control_file = path + "/glm_presets_control_file.txt"
ttest_presets_control_file = path + "/ttest_presets_control_file.txt"

preprocessing_template_file = path + '/preprocessing_template.txt'
glm_template_file = path + '/glm_template.txt'
ttest_template_file = path + '/ttest_template.txt'



####################################################################################################
#### Preset Variables ####
# The variables listed here are pre-entered in the pop-up entry boxes to save time.
# These are determined by the textfile "presets_control_file.txt"
# Every time you run this script, it will update the contents of "presets_control_file.txt", so that
# when you run the script next time, the preset values will be the previous values you used last time
# you ran the script.

with open(presets_control_file) as control_file:
	presets_init = control_file.read().splitlines()
presets = {}
for item in presets_init:
	splits = item.split(":")
	presets[splits[0]] = splits[1]



backup_path = presets['backup_path']
icarus_login = presets['icarus_login']
icarus_password = presets['icarus_password']
output_path = presets['output_path']
input_password_save = presets['password_save']


####################################################################################################
####################################################################################################
##### Backing Script up to Icarus #####

def icarus_Backup(icarus_password, output_path, script_name, icarus_login, icarus_backup_path):
	print('\nBacking up script from local machine to Icarus')
	subprocess.call(["/usr/local/bin/sshpass -p '%s' scp %s/%s %s@icarus.neuroimage.wustl.edu:%s" % (icarus_password, output_path, script_name, icarus_login, icarus_backup_path)], shell=True)


####################################################################################################
####################################################################################################
##### Screen Size #####

# This is used to determine the size of your main screen
screensize_test = Tk()
pointer = screensize_test.winfo_pointerxy()
screensize_test.geometry('+%s+%s' % (pointer[0], pointer[1]))
screensize_test.update()
screensize_test.attributes("-alpha", 00)
screensize_test.state('zoomed')
screenheight = screensize_test.winfo_height()
screenwidth = screensize_test.winfo_width()
screenx = screensize_test.winfo_rootx()
screeny = screensize_test.winfo_rooty()
screensize_test.after(1, lambda: screensize_test.destroy())
mainloop()

####################################################################################################




button_list = ["Preprocessing Script",
					 "GLM Script",
					 "t-test script"]

buttons = {}
for item in button_list:
	buttons[item] = 0
buttons_outcome = {}

type_selection = None
backup = None
icarus_backup_path = None
password_save_selection = None

def sel(text):
	global type_selection
	type_selection = text

def end():
	global icarus_backup_path, backup, icarus_login, icarus_password, output_path
	backup_check = var1.get()
	if backup_check:
		backup = True
	else:
		backup = False
	output_path = output_path_entry.get()
	icarus_backup_path = icarus_path_entry.get()
	icarus_login = icarus_login_entry.get()
	icarus_password = icarus_password_entry.get()
	master.destroy()

def sel1():
	global password_save_selection
	password_save_selection = str(var2.get())

def exitscript():
	sys.exit()


master = Tk()
master.title("Script Selection")
master.wm_attributes("-topmost", 1)  # makes sure that the window appears on top of all other windows
label = Label(master, text=str('Which type of AFNI script do you want to generate?\n'), padx=20).grid(row=1, column=1, columnspan=3)

var0 = IntVar()
count = 1
for item in buttons:
	buttons[item] = IntVar()
	user_button = Radiobutton(master, text=item, font='helvetica 14 bold', padx=20, variable=var0, value=count, command=lambda text=item: sel(text)).grid(row=count+1, columnspan=3, column=1)
	count += 1

count += 1
label1 = Label(master, text=' ').grid(row=count)

label5 = Label(master, text='Your generated script will be saved in the following folder:').grid(row=count+1, column=1, columnspan=3)
output_path_entry = Entry(master, width=80)
output_path_entry.insert(0,output_path)
output_path_entry.grid(row=count+2, column=1, columnspan=3, padx=20)

label6 = Label(master, text=' \n\n').grid(row=count+3)

var1 = IntVar()
backup_button = Checkbutton(master, text='I want to back this script up to Icarus', variable = var1).grid(row=count+4, column=1, columnspan=3)
label2 = Label(master, text='If you want to back up your script to Icarus, it will be saved to the following folder:').grid(row=count+5, column=1, columnspan=3)
icarus_path_entry = Entry(master, width=80)
icarus_path_entry.insert(0,backup_path)
icarus_path_entry.grid(row=count+6, column=1, columnspan=3)

label3 = Label(master, text='Icarus login').grid(row=count+7, column=1, sticky='e')
icarus_login_entry = Entry(master, width=20)
icarus_login_entry.insert(0,icarus_login)
icarus_login_entry.grid(row=count+7, column=2, sticky='w')

label4 = Label(master, text='Icarus password').grid(row=count+8, column=1, sticky='e')
icarus_password_entry = Entry(master, width=20)
icarus_password_entry.insert(0,icarus_password)
icarus_password_entry.grid(row=count+8, column=2, sticky='w')

var2 = IntVar()
if input_password_save == "True":
	var2.set(1)
	password_save_selection = str(var2.get())
elif input_password_save == "False":
	var2.set(2)
	password_save_selection = str(var2.get())

Label(master, text='Save password in presets?').grid(row=count+7, column=3, padx=20)
Radiobutton(master, text="Yes", padx=20, variable=var2, value=1, command=sel1).grid(row=count+8, column=3)
Radiobutton(master, text="No", padx=20, variable=var2, value=2, command=sel1).grid(row=count+9, column=3)

btn = Button(master, text="OK", command=end).grid(row=count+10, column=1, columnspan=5)
btn1 = Button(master, text="Cancel", command=exitscript).grid(row=count+11, column=1, columnspan=5)

master.update_idletasks()
windowheight = master.winfo_height()
windowwidth = master.winfo_width()
positionRight = screenx + int(screenwidth/2 - windowwidth/2)
positionDown = screeny + int(screenheight / 2 - windowheight / 2)
master.geometry("+%s+%s" % (positionRight, positionDown))
mainloop()

if password_save_selection == "1":
	password_save = True
elif password_save_selection == "2":
	password_save = False

if not type_selection:
	sys.exit("Please select a type of script to generate.")

if backup:
	root = Tk()  # create TKinter window
	root.title("VPN Check")
	root.geometry('+1070+500')  # sets the location of the window - format (+horiz+vert)
	root.wm_attributes("-topmost", 1)  # makes sure that the window appears on top of all other windows
	label = Label(root)
	label.pack()
	label.config(text=str(
		"You've chosen to to back up your script to Icarus.\n Please make sure you have connected to the VPN before clicking 'continue'"))
	button = Button(root, text='Continue', width=25, command=root.destroy)  # button closes window when pressed
	button.pack()

	root.update_idletasks()
	windowheight = root.winfo_height()
	windowwidth = root.winfo_width()
	positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
	positionDown = screeny + int(screenheight / 2 - windowheight / 2)
	root.geometry("+%s+%s" % (positionRight, positionDown))

	root.mainloop()


if "Preprocessing" in type_selection:

	####################################################################################################
	####################################################################################################
	#### Preset Variables ####
	# The variables listed here are pre-entered in the pop-up entry boxes to save time.
	# These are determined by the textfile "preprocessing_presets_control_file.txt"
	# Every time you run this script, it will update the contents of "preprocessing_presets_control_file.txt", so that
	# when you run the script next time, the preset values will be the previous values you used last time
	# you ran the script.

	with open(preprocessing_presets_control_file) as control_file:
		preprocessing_presets_init = control_file.read().splitlines()
	preprocessing_presets = {}
	runs = []
	for item in preprocessing_presets_init:
		splits = item.split(":")
		if "run_" not in splits[0]:
			preprocessing_presets[splits[0]] = splits[1]
		else:
			runs.append(splits[1])
		preprocessing_presets["runs"] = runs


	input_script_prefix = preprocessing_presets['script_prefix']
	input_initial_directory = preprocessing_presets['initial_directory']
	input_MNI_template_path = preprocessing_presets['MNI_template_path']
	input_participant_list = preprocessing_presets['participant_list']
	input_number_runs = preprocessing_presets['number_runs']
	input_number_TRs = preprocessing_presets['number_TRs']
	input_TR_length = preprocessing_presets['TR_length']
	input_TR_list = preprocessing_presets['TR_list']
	input_lengths_equal = preprocessing_presets['lengths_equal']
	input_anatomy = preprocessing_presets['anatomy']
	preset_runs = preprocessing_presets['runs']


	####################################################################################################
	####################################################################################################
	##### GUI Window: Basic Script Parameters #####

	script_prefix = None
	initial_dir = None
	MNI_template_path = None
	participant_list = None
	run_number = None
	tr_count = None
	tr_length = None
	anatomy_file = None
	runs = []
	tr_list = None


	selection = None
	newlist = input_participant_list[1:-1].split(" ")


	def entry_fields():
		global script_prefix, initial_dir, MNI_template_path, participant_list, run_number, tr_count, tr_length
		initial_dir = e1.get()  # retrieves the response from the corresponding input box and assigns its value to the global variable
		MNI_template_path = e7.get()
		participant_list = e6.get()
		run_number = e2.get()
		tr_count = e4.get()
		tr_length = e3.get()
		script_prefix = e5.get()
		master.destroy()

	def sel():
		global selection
		selection = str(var.get())


	def exitscript():
		sys.exit()


	master = Tk()
	master.title("Input info")
	master.geometry('+1070+500')
	master.wm_attributes("-topmost", 1)

	var = IntVar()
	if input_lengths_equal.lower() == "yes":
		var.set(1)
		selection = str(var.get())
	elif input_lengths_equal.lower() == "no":
		var.set(2)
		selection = str(var.get())


	Label(master, text="Script Name Prefix").grid(row=0)
	e5 = Entry(master)  # Create text entry box
	e5.insert(0, input_script_prefix)  # Insert example text in text entry line
	e5.grid(row=1)  # Place text box in row 1

	Label(master, text="").grid(
		row=2)  # Workaround to create a blank line (items will snap to next highest row if one is missing, regardless of value set)

	Label(master,
		  text='For any strings that refer to individual subject numbers, use "$subj"\n"$subj" =  %s, %s, %s....' % (
		  newlist[0], newlist[1], newlist[2])).grid(row=3, padx=10)

	Label(master, text="").grid(row=4)

	Label(master, text="Name of initial directory (where each individual subject's data is kept)").grid(row=5)
	e1 = Entry(master, width=50)
	e1.insert(0, input_initial_directory)
	e1.grid(row=6)

	Label(master, text="").grid(row=7)

	Label(master, text="Path to your preferred MNI template (usually MNI152_T1_2009c+tlrc, found in 'users/yourname/abin/')").grid(row=8)
	e7 = Entry(master, width=50)
	e7.insert(0, input_MNI_template_path)
	e7.grid(row=9)

	Label(master, text="").grid(row=10)


	Label(master, text="List of Participants").grid(row=11)
	if len(input_participant_list) > 1:
		participant_width = len(input_participant_list)
		if participant_width > ((master.winfo_screenwidth() / 10) - 20):
			participant_width = (master.winfo_screenwidth() / 10) - 20
	else:
		participant_width = (master.winfo_screenwidth() / 10) - 20
	e6 = Entry(master, width=participant_width)
	e6.insert(0, input_participant_list)
	e6.grid(row=12, padx=20)

	Label(master, text="").grid(row=13)

	Label(master, text="Number of runs").grid(row=14)
	e2 = Entry(master, width=20)
	e2.insert(0, input_number_runs)
	e2.grid(row=15)

	Label(master, text="").grid(row=16)

	Label(master, text="Is the number of TRs the same for each run?").grid(row=17)
	Radiobutton(master, text="Yes", padx=20, variable=var, value=1, command=sel).grid(row=18)
	Radiobutton(master, text="No", padx=20, variable=var, value=2, command=sel).grid(row=19)

	Label(master, text="").grid(row=20)

	Label(master, text="Number of TRs (ignore if different for different runs)").grid(row=21)
	e4 = Entry(master, width=20)
	e4.insert(0, input_number_TRs)
	e4.grid(row=22)

	Label(master, text="").grid(row=23)

	Label(master, text="Length of TR (in seconds)").grid(row=24)
	e3 = Entry(master, width=20)
	e3.insert(0, input_TR_length)
	e3.grid(row=25)

	Label(master, text="").grid(row=26)

	Button(master, text='Submit', command=entry_fields).grid(row=27, sticky=S,
															 pady=4)  # create a "Submit" button that triggers the above "entry_fields" function
	Button(master, text='Cancel', command=exitscript).grid(row=28, sticky=S,
															 pady=4)  # create a "Submit" button that triggers the above "entry_fields" function

	master.update_idletasks()
	windowheight = master.winfo_height()
	windowwidth = master.winfo_width()
	positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
	positionDown = screeny + int(screenheight / 2 - windowheight / 2)
	master.geometry("+%s+%s" % (positionRight, positionDown))

	mainloop()

	####################################################################################################
	####################################################################################################
	##### GUI Window: Unequal TR Lengths #####

	selection = int(selection)  # for selection, Yes = 1 and 2 = No
	run_number = int(run_number)

	if selection == 2:
		def entry_fields2():
			global tr_list
			tr_list = e1.get()
			master.destroy()


		master = Tk()
		master.title("Input info")
		master.geometry('+1070+500')
		master.wm_attributes("-topmost", 1)

		Label(master, text="List the number of TRs in each run").grid(row=1)
		e1 = Entry(master, width=50)
		e1.insert(0, input_TR_list)
		e1.grid(row=2, padx=100)

		label = Label(master, text="Please check your output script carefully; this generator script does not completely support unequal TR lengths").grid(row=3)

		Button(master, text='Submit', command=entry_fields2).grid(row=4, sticky=S, pady=4)

		master.update_idletasks()
		windowheight = master.winfo_height()
		windowwidth = master.winfo_width()
		positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
		positionDown = screeny + int(screenheight / 2 - windowheight / 2)
		master.geometry("+%s+%s" % (positionRight, positionDown))

		mainloop()

	else:  # automatically generate TR list for script
		tr_list = "( "
		for run in range(run_number):
			tr_list = tr_list + tr_count + " "
		tr_list = tr_list + ")"


	####################################################################################################
	####################################################################################################
	##### GUI Window: Runs #####

	run_entries = {}
	run_entries_outcome = {}

	for run in range(1, run_number + 1):
		if run < 10:
			run_0X = "0" + str(run)
		else:
			run_0X = str(run)
		run_entries[run_0X] = None


	def entry_fields3():
		global anatomy_file, run_entries
		anatomy_file = e1.get()
		for item in run_entries:
			run_entries_outcome[item] = run_entries[item].get()
		master.destroy()

	def exitscript():
		sys.exit()


	master = Tk()
	master.title("Input info")
	master.geometry('+1070+500')
	master.wm_attributes("-topmost", 1)

	Label(master,
		  text='For any strings that refer to individual subject numbers, use "$subj"\n"$subj" =  %s, %s, %s....' % (
			  newlist[0], newlist[1], newlist[2])).grid(row=0, padx=10, columnspan=2)

	Label(master, text='''$input_dir refers to the directory:\n'%s/"$subj}"/' ''' % initial_dir).grid(row=1, padx=10,
																									  columnspan=2)

	Label(master, text="").grid(row=2)

	Label(master, text="Input the paths for an individual subject's anatomical and run files").grid(row=3, padx=10,
																									columnspan=2)

	Label(master, text="").grid(row=4)

	Label(master, text="").grid(row=5)

	Label(master, text="Anatomy").grid(row=6, column=0)
	e1 = Entry(master, width=50)
	e1.insert(0, input_anatomy)
	e1.grid(row=6, column=1)

	Label(master, text="").grid(row=7)
	rowloop = 8
	for run in range(1, run_number + 1):
		if run < 10:
			run_0X = "0" + str(run)
		else:
			run_0X = str(run)

		run_entries[run_0X] = StringVar()

		Label(master, text="Run" + run_0X).grid(column=0, row=rowloop)
		entry = Entry(master, textvariable=run_entries[run_0X], width=50)
		if len(preset_runs) >= run:
			entry.insert(0, preset_runs[run - 1])
		entry.grid(column=1, row=rowloop)
		rowloop += 1

	Label(master, text="").grid(row=rowloop)

	Button(master, text='Submit', command=entry_fields3).grid(sticky=S, pady=4, columnspan=2, row=rowloop+1)
	Button(master, text='Cancel', command=exitscript).grid(sticky=S, pady=4, columnspan=2, row=rowloop+2)

	master.update_idletasks()
	windowheight = master.winfo_height()
	windowwidth = master.winfo_width()
	positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
	positionDown = screeny + int(screenheight / 2 - windowheight / 2)
	master.geometry("+%s+%s" % (positionRight, positionDown))

	mainloop()

	for item in run_entries_outcome:
		if not run_entries_outcome[item]:
			sys.exit("Please make sure to include a name for each of your runs")

	key_list = sorted(run_entries_outcome)
	for item in key_list:
		runs.append(run_entries_outcome[item])


	####################################################################################################
	####################################################################################################
	##### Prepping Script Text Blocks #####

	# AFNI convention uses a polynomial order (polort) of 1 per 150 seconds of run time
	# If you have different runs that are different lengths (i.e. would require different polort numbers) this WILL NOT WORK
	polort_number = float(tr_length) * float(tr_count)
	polort_number = int(math.ceil(polort_number / 150))

	run_block = ""

	for run in range(run_number):  # Create a block of text for the script where the .nii run data is copied in
		if run < 9:
			run_block = run_block + '3dTcat -prefix+orig $output_dir/pb00.$subj.r0%s.tcat \\\n' % (run + 1)
		if run > 8:
			run_block = run_block + '3dTcat -prefix+orig $output_dir/pb00.$subj.r%s.tcat \\\n' % (run + 1)
		run_block = run_block + "    " + runs[run] + "'[0..$]'\n"

	subj_number_block = ""
	end_block = ""

	subj_number_block = "##################################################\n# ***CHANGE***\n# This is the list of subjects (VCnumbers, etc) you'd like to loop through\nforeach subj_number %s\n# foreach subj_number (vc12345, vc12346, vc12347, vc12348, vc12349, vc12350)\n##################################################" % participant_list
	script_name = script_prefix + "_Preprocessing"

	####################################################################################################
	####################################################################################################
	##### Generating AFNI Script #####


	# Open the template file
	with open(preprocessing_template_file) as template_text:
		template = template_text.read()

	# Replace the relevant placeholders in the template file with this script's specific parameters
	template = template.replace("$$%%script_name%%$$", script_name)
	template = template.replace("$$%%subj_number_block%%$$", subj_number_block)
	template = template.replace("$$%%initial_dir%%$$", initial_dir)
	template = template.replace("$$%%MNI_template_path%%$$", MNI_template_path)
	template = template.replace("$$%%run_number%%$$", str(run_number))
	template = template.replace("$$%%tr_list%%$$", tr_list)
	template = template.replace("$$%%anatomy_file%%$$", anatomy_file)
	template = template.replace("$$%%run_block%%$$", run_block)
	template = template.replace("$$%%polort_number%%$$", str(polort_number))

	# Write the text file.
	script_name = "proc." + script_name
	output_file = output_path + "/" + script_name  # Name/location of the generated AFNI script
	textfile = open(output_file, 'w')  # Create the textfile
	textfile.write(template)
	textfile.close()

	print("\nAFNI script generated: %s" % script_name)
	print("\nRun command:\n tcsh -xef %s |& tee output.%s" % (script_name, script_name))


	####################################################################################################
	####################################################################################################
	##### Updating Preprocessing Presets Control List #####


	if selection == 1:
		lengths_equal = "Yes"
	elif selection == 2:
		lengths_equal = "No"

	new_preprocessing_control_list = ['script_prefix:' + script_prefix,
									  'initial_directory:' + initial_dir,
									  'MNI_template_path:' + MNI_template_path,
									  'participant_list:' + participant_list,
									  'number_runs:' + str(run_number),
									  'number_TRs:' + str(tr_count),
									  'TR_length:' + str(tr_length),
									  'lengths_equal:' + lengths_equal,
									  'TR_list:' + tr_list,
									  'anatomy:' + anatomy_file]

	for run in range(1, run_number + 1):
		if run < 10:
			run_0X = "0" + str(run)
		else:
			run_0X = str(run)
		new_preprocessing_control_list.append('run_' + run_0X + ":" + runs[run-1])

	with open(preprocessing_presets_control_file, 'w') as control_file:
		control_file.writelines('\n'.join(new_preprocessing_control_list))




	if backup:
		icarus_Backup(icarus_password, output_path, script_name, icarus_login, icarus_backup_path)


####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################


if "GLM" in type_selection:
	GLM_selection = None

	def sel(text):
		global GLM_selection
		GLM_selection = text
		master.destroy()


	master = Tk()
	master.title("Script Selection")
	master.geometry('+1070+500')  # sets the location of the window - format (+horiz+vert)
	master.wm_attributes("-topmost", 1)  # makes sure that the window appears on top of all other windows
	label = Label(master, text=str('How do you want to create your GLM script?\n')).grid(column=1, columnspan=5)
	label1 = Label(master, text=str('Auto:'), font='helvetica 14 bold').grid(column=1, columnspan=5)
	label2 = Label(master, text=str('Use a .csv spreadsheet with parameters\nto automatically create multiple GLM scripts'), padx=20).grid(column=1, columnspan=5)
	label3 = Label(master, text=str('Manual:'), font='helvetica 14 bold').grid(column=1, columnspan=5)
	label4 = Label(master, text=str('You provide input through pop-up\nwindows to create a single GLM script\n\n\n'), padx=20).grid(column=1, columnspan=5)

	var1 = IntVar()
	user_button1 = Radiobutton(master, text="Auto", font='helvetica 20', padx=20, variable=var1, command=lambda text="Auto": sel(text)).grid(sticky='w', column=3)
	var2 = IntVar()
	user_button2 = Radiobutton(master, text="Manual", font='helvetica 20' ,padx=20, variable=var2, command=lambda text="Manual": sel(text)).grid(sticky='w', column=3)

	master.update_idletasks()
	windowheight = master.winfo_height()
	windowwidth = master.winfo_width()
	positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
	positionDown = screeny + int(screenheight / 2 - windowheight / 2)
	master.geometry("+%s+%s" % (positionRight, positionDown))

	mainloop()

	if not GLM_selection:
		sys.exit("Please select a method of GLM script generation.")


	def write_GLM_Script(tr_length, tr_count, participant_list, script_prefix, GLM_folder, choice_gam_tent,
						 stim_files, stim_names, timing_files_folder, covariate, new_glts, glt_names, run_number,
						 glm_template_file, main_dir, output_path):
		####################################################################################################
		####################################################################################################
		##### Prepping Script Text Blocks #####

		# AFNI convention uses a polynomial order (polort) of 1 per 150 seconds of run time
		# If you have different runs that are different lengths (i.e. would require different polort numbers) this WILL NOT WORK
		polort_number = float(tr_length) * float(tr_count)
		polort_number = int(math.ceil(polort_number / 150))

		subj_number_block = ""
		end_block = ""

		subj_number_block = "##################################################\n# ***CHANGE***\n# !!! Identical !!!\n# This is the list of subjects (VCnumbers, etc) you'd like to loop through\nforeach subj_number %s\n# foreach subj_number (vc12345, vc12346, vc12347, vc12348, vc12349, vc12350)\n##################################################" % participant_list
		end_block = 'end\n\necho "execution finished: `date`"'
		script_name = script_prefix + "_GLM_" + GLM_folder

		if choice_gam_tent == "Tent":
			GLM_folder = "TENT" + GLM_folder

		stim_block = ""

		fixed_stim_files = []

		for stim in stim_files:
			if "${subj}" in stim:  # An old version of the code referred to ${subj} instead of "$subj" (${subj} doesn't work); if it exists, replace it.
				j = stim.find("${subj}")
				if j == 0:
					fixed_stim = '''"$subj"'%s' ''' % (stim[j + 7:])
					fixed_stim_files.append(fixed_stim)
				else:
					fixed_stim = ''''%s'"$subj"'%s' ''' % (stim[:j], stim[j + 7:])
					fixed_stim_files.append(fixed_stim)
			else:  # Even if it's correct, the filepath needs to be modified slightly (because of how tcsh handles putting variables inside strings)
				j = stim.find('"$subj"')
				if j == 0:
					fixed_stim = '''"$subj"'%s' ''' % (stim[j + 7:])
					fixed_stim_files.append(fixed_stim)
				else:
					fixed_stim = ''''%s'"$subj"'%s' ''' % (stim[:j], stim[j + 7:])
					fixed_stim_files.append(fixed_stim)

		##################################################
		### Block setting Stim files

		num_stimts = str((len(stim_files) + 6))  # total number of stimulus files + 6 (includes, x/y/z/yaw/pitch/roll)

		stim_counter = 1
		for file in fixed_stim_files:
			stim_block = stim_block + '''set stim_%s=%s\n''' % (stim_counter, file)
			stim_counter += 1

		##################################################
		### Block setting Stim labels/names

		stim_name_block = ""
		stim_name_counter = 1
		for name in stim_names:
			stim_name_block = stim_name_block + "set stim_label_%s='%s'\n" % (stim_name_counter, name)
			stim_name_counter += 1

		##################################################
		### Block setting Stim files to be copied into the GLM folder

		stim_copy_block = ""
		copy_counter = 1
		for item in range(len(fixed_stim_files)):
			stim_copy_block = stim_copy_block + "$stim_dir/%s$stim_%s			\\\n" % (
				timing_files_folder, copy_counter)
			copy_counter += 1
		stim_copy_block = stim_copy_block[
						  :-1]  # Final loop creates an extra linebreak at the end, this messes the AFNI script up

		##################################################
		### Block setting up the 3dDeconvolve section

		basis = ""
		if choice_gam_tent == "Gamma (GAM)":
			basis = "GAM"
		elif choice_gam_tent == "Tent":
			basis = "TENT(0,16.5,7"

		deconvolve_block = ""
		deconvolve_stim_counter = 1
		for item in range(len(fixed_stim_files)):
			if covariate == "1":
				deconvolve_block = deconvolve_block + "-stim_times_AM2 %s $glm_dir/stimuli/$stim_%s '%s'									\\\n-stim_label %s $stim_label_%s															\\\n" % (
					deconvolve_stim_counter, deconvolve_stim_counter, basis, deconvolve_stim_counter,
					deconvolve_stim_counter)
				deconvolve_stim_counter += 1
			else:
				deconvolve_block = deconvolve_block + "-stim_times %s $glm_dir/stimuli/$stim_%s '%s'										\\\n-stim_label %s $stim_label_%s															\\\n" % (
					deconvolve_stim_counter, deconvolve_stim_counter, basis, deconvolve_stim_counter,
					deconvolve_stim_counter)
				deconvolve_stim_counter += 1

		deconvolve_block = deconvolve_block + "-stim_file %s $glm_dir/motion_demean.1D'[0]' -stim_base %s -stim_label %s roll			\\\n" % (
			deconvolve_stim_counter, deconvolve_stim_counter, deconvolve_stim_counter)
		deconvolve_stim_counter += 1
		deconvolve_block = deconvolve_block + "-stim_file %s $glm_dir/motion_demean.1D'[1]' -stim_base %s -stim_label %s pitch		\\\n" % (
			deconvolve_stim_counter, deconvolve_stim_counter, deconvolve_stim_counter)
		deconvolve_stim_counter += 1
		deconvolve_block = deconvolve_block + "-stim_file %s $glm_dir/motion_demean.1D'[2]' -stim_base %s -stim_label %s yaw			\\\n" % (
			deconvolve_stim_counter, deconvolve_stim_counter, deconvolve_stim_counter)
		deconvolve_stim_counter += 1
		deconvolve_block = deconvolve_block + "-stim_file %s $glm_dir/motion_demean.1D'[3]' -stim_base %s -stim_label %s dS			\\\n" % (
			deconvolve_stim_counter, deconvolve_stim_counter, deconvolve_stim_counter)
		deconvolve_stim_counter += 1
		deconvolve_block = deconvolve_block + "-stim_file %s $glm_dir/motion_demean.1D'[4]' -stim_base %s -stim_label %s dL			\\\n" % (
			deconvolve_stim_counter, deconvolve_stim_counter, deconvolve_stim_counter)
		deconvolve_stim_counter += 1
		deconvolve_block = deconvolve_block + "-stim_file %s $glm_dir/motion_demean.1D'[5]' -stim_base %s -stim_label %s dP		\\\n" % (
			deconvolve_stim_counter, deconvolve_stim_counter, deconvolve_stim_counter)

		if choice_gam_tent == "Tent":
			iresp_counter = 1
			for item in range(len(fixed_stim_files)):
				deconvolve_block = deconvolve_block + "-iresp %s $glm_dir/iresp_$stim_%s.$subj												\\\n" % (
					iresp_counter, iresp_counter)

		deconvolve_glt_counter = 1
		for item in range(len(new_glts)):
			deconvolve_block = deconvolve_block + "-gltsym 'SYM: %s'				\\\n-glt_label %s %s				\\\n" % (
				new_glts[deconvolve_glt_counter - 1], deconvolve_glt_counter, glt_names[deconvolve_glt_counter - 1])
			deconvolve_glt_counter += 1

		deconvolve_block = deconvolve_block[
						   :-1]  # Final loop creates an extra linebreak at the end, this messes the AFNI script up

		##################################################
		### Block setting up the ideals section

		ideals_block = ""
		index_start = (polort_number + 1) * run_number
		for name in stim_names:
			ideals_block = ideals_block + "1dcat X.nocensor.xmat.1D'[%s]' > ideal_%s.1D\n" % (index_start, name)
			index_start += 1


		####################################################################################################
		####################################################################################################
		##### Generating AFNI Script #####


		# Open the template file
		with open(glm_template_file) as template_text:
			template = template_text.read()

		# Replace the relevant placeholders in the template file with this script's specific parameters
		template = template.replace("$$%%script_name%%$$", script_name)
		template = template.replace("$$%%subj_number_block%%$$", subj_number_block)
		template = template.replace("$$%%main_dir%%$$", main_dir)
		template = template.replace("$$%%GLM_folder%%$$", GLM_folder)
		template = template.replace("$$%%num_stimts%%$$", num_stimts)
		template = template.replace("$$%%stim_block%%$$", stim_block)
		template = template.replace("$$%%stim_name_block%%$$", stim_name_block)
		template = template.replace("$$%%run_number%%$$", str(run_number))
		template = template.replace("$$%%stim_copy_block%%$$", stim_copy_block)
		template = template.replace("$$%%polort_number%%$$", str(polort_number))
		template = template.replace("$$%%deconvolve_block%%$$", deconvolve_block)
		template = template.replace("$$%%ideals_block%%$$", ideals_block)

		# Write the text file.
		script_name = "proc." + script_name
		output_file = output_path + "/" + script_name  # Name/location of the generated AFNI script
		textfile = open(output_file, 'w')  # Create the textfile
		textfile.write(template)
		textfile.close()

		print("\nAFNI script generated: %s" % script_name)
		print("\nRun command:\n tcsh -xef %s |& tee output.%s" % (script_name, script_name))


	####################################################################################################
	####################################################################################################


	if GLM_selection == "Auto":
		data_dict_list = []
		data_file = path + '/glm_parameters.csv'
		with open(data_file) as csvfile:
			data_dict_list = [{k: v for k, v in row.items()} for row in csv.DictReader(csvfile, skipinitialspace=True)]


		for GLM in data_dict_list:
			if not GLM["GLM_name"]:  # if the row in the csv is empty, skip it
				continue
			script_prefix = GLM["Script_prefix"]
			GLM_folder = GLM["GLM_name"]
			main_dir = GLM["Main_dir"]
			run_number = GLM["Run_number"]
			tr_count = GLM["Number_TRs"]
			tr_length = GLM["TR_length"]
			timing_files_folder = GLM["Onsets_folder"]
			basis_function = GLM["Basis_function"]
			trial_covariate = GLM["Trial_covariate"]
			participant_list = GLM["Participant_list"]

			if basis_function.lower() in ['gamma', 'gam']:
				choice_gam_tent = "Gamma (GAM)"
			elif basis_function.lower() in ['tent']:
				choice_gam_tent = "Tent"
			else:
				sys.exit("Please make sure that each GLM uses either the Gamma or Tent basis function")

			if trial_covariate.lower() == 'yes':
				covariate = "1"
			elif trial_covariate.lower() == 'no':
				covariate = "0"
			else:
				sys.exit("Please make sure that each GLM either has 'Yes' or 'No' for use of a trial-level covariate.")

			timing_files = {}
			timing_names = {}
			glt_codes = {}
			glt_names_dict = {}

			for item in GLM:
				if "timing_file" in item.lower():
					timing_files[item] = GLM[item]
			for item in GLM:
				if "timing_name" in item.lower():
					timing_names[item] = GLM[item]
			for item in GLM:
				if "glt_code" in item.lower():
					glt_codes[item] = GLM[item]
			for item in GLM:
				if "glt_name" in item.lower():
					glt_names_dict[item] = GLM[item]

			stim_files = []
			stim_names = []
			new_glts = []
			glt_names = []

			key_list = sorted(timing_files)
			for item in key_list:
				if timing_files[item]:
					stim_files.append(timing_files[item])
			key_list = sorted(timing_names)
			for item in key_list:
				if timing_names[item]:
					stim_names.append(timing_names[item])
			key_list = sorted(glt_codes)
			for item in key_list:
				if glt_codes[item]:
					new_glts.append(glt_codes[item])
			key_list = sorted(glt_names_dict)
			for item in key_list:
				if glt_names_dict[item]:
					glt_names.append(glt_names_dict[item])

			if not len(stim_files) == len(stim_names):
				sys.exit("Please make sure that each timing file has a name provided.")
			if not len(new_glts) == len(glt_names):
				sys.exit("Please make sure that each GLT code has a name provided.")


			run_number = int(run_number)




			write_GLM_Script(tr_length, tr_count, participant_list, script_prefix, GLM_folder, choice_gam_tent,
								 stim_files, stim_names, timing_files_folder, covariate, new_glts, glt_names,
								 run_number, glm_template_file, main_dir, output_path)

			script_name = script_prefix + "_GLM_" + GLM_folder

			if backup:
				icarus_Backup(icarus_password, output_path, script_name, icarus_login, icarus_backup_path)


	####################################################################################################
	####################################################################################################


	if GLM_selection == "Manual":
		
		####################################################################################################
		####################################################################################################
		#### Preset Variables ####
		# The variables listed here are pre-entered in the pop-up entry boxes to save time.
		# These are determined by the textfile "glm_presets_control_file.txt"
		# Every time you run this script, it will update the contents of "glm_presets_control_file.txt", so that
		# when you run the script next time, the preset values will be the previous values you used last time
		# you ran the script.

		with open(glm_presets_control_file) as control_file:
			glm_presets_init = control_file.read().splitlines()
		glm_presets = {}
		timings = []
		for item in glm_presets_init:
			splits = item.split(":")
			if "timing_file_" not in splits[0]:
				glm_presets[splits[0]] = splits[1]
			else:
				timings.append(splits[1])
			glm_presets["timings"] = timings

		input_script_prefix = glm_presets['script_prefix']
		input_participant_list = glm_presets['participant_list']
		input_GLM_name = glm_presets['GLM_name']
		input_initial_directory = glm_presets['initial_directory']
		input_number_runs = glm_presets['number_runs']
		input_number_TRs = glm_presets['number_TRs']
		input_TR_length = glm_presets['TR_length']
		input_onsets_folder = glm_presets['onsets_folder']
		input_number_timing_files = glm_presets['number_timing_files']
		input_trial_covariate = glm_presets['trial_covariate']


		if input_trial_covariate.lower() == 'yes':
			input_trial_covariate = "Yes"
		elif input_trial_covariate.lower() == 'no':
			input_trial_covariate = "No"
		else:
			input_trial_covariate = ""


		####################################################################################################
		####################################################################################################
		##### GUI Window: Gamma or Tent? #####

		choice_gam_tent = None


		def sel2():
			global choice_gam_tent  # allows access to global variable "choice"
			choice_gam_tent = str(
				var.get())  # retrieves the response from the radiobutton and assigns its value to "choice"
			master.destroy()  # closes the radiobutton window after a radiobutton has been pressed


		master = Tk()  # create TKinter (GUI) window
		master.title("Input info")  # sets title of window
		master.geometry('+1070+500')  # sets the location of the window - format (+horiz+vert)
		master.wm_attributes("-topmost", 1)  # makes sure that the window appears on top of all other windows
		var = IntVar()  # creates a variable to use, which is an integer

		Label(master, text="Choose your type of basis function").grid(row=0,
																	  padx=20)  # Creates label with name, places it in row 0 with horizontal (x) padding of 20
		Radiobutton(master, text="Gamma (GAM)", padx=20, variable=var, value=1, command=sel2).grid(
			row=1)  # Creates a radiobutton with name, x-padding of 20, updating variable "var", value of selection to update variable, and when click will activate "sel1" - placed in row 1
		Radiobutton(master, text="Tent", padx=20, variable=var, value=2, command=sel2).grid(row=2)

		master.update_idletasks()
		windowheight = master.winfo_height()
		windowwidth = master.winfo_width()
		positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
		positionDown = screeny + int(screenheight / 2 - windowheight / 2)
		master.geometry("+%s+%s" % (positionRight, positionDown))

		mainloop()  # End info for GUI window

		####################################################################################################
		####################################################################################################
		##### GUI Window: Basic Script Parameters #####

		script_prefix = None
		main_dir = None
		run_number = None
		GLM_folder = None
		tr_count = None
		tr_length = None
		number_timing_files = None

		newlist = input_participant_list[1:-1].split(" ")

		def entry_fields():
			global script_prefix, main_dir, run_number, GLM_folder, tr_count, tr_length, number_timing_files, participant_list
			main_dir = e1.get()
			run_number = e2.get()
			script_prefix = e3.get()
			GLM_folder = e4.get()
			tr_count = e5.get()
			tr_length = e6.get()
			number_timing_files = e7.get()
			participant_list = e8.get()
			master.destroy()

		def exitscript():
			sys.exit()

		master = Tk()
		master.title("Input info")
		master.geometry('+1070+500')
		master.wm_attributes("-topmost", 1)

		Label(master, text="Script Name Prefix").grid(row=0)
		e3 = Entry(master)
		e3.insert(0, input_script_prefix)
		e3.grid(row=1)

		Label(master, text="").grid(
			row=2)

		Label(master, text="Name of GLM folder to be created (for this contrast)").grid(row=0)
		e4 = Entry(master, width=50)
		e4.insert(0, input_GLM_name)
		e4.grid(row=1)

		Label(master, text="").grid(row=2)

		Label(master,
			  text='For any strings that refer to individual subject numbers, use "$subj"\n"$subj" =  %s, %s, %s....' % (
			  newlist[0], newlist[1], newlist[2])).grid(row=3, padx=10)

		Label(master, text="").grid(row=4)

		Label(master,
			  text="Name of main directory (this is the same as the initial directory from your\npreprocessing script, where each individual subject's data is kept").grid(
			row=5, padx=20)
		e1 = Entry(master, width=50)
		e1.insert(0, input_initial_directory)
		e1.grid(row=6)

		Label(master, text="").grid(row=7)

		Label(master, text="List of Participants").grid(row=8)
		if len(input_participant_list) > 1:
			participant_width = len(input_participant_list)
			if participant_width > ((master.winfo_screenwidth() / 10) - 20):
				participant_width = (master.winfo_screenwidth() / 10) - 20
		else:
			participant_width = (master.winfo_screenwidth() / 10) - 20
		e8 = Entry(master, width=participant_width)
		e8.insert(0, input_participant_list)
		e8.grid(row=9, padx=20)

		Label(master, text="").grid(row=10)

		Label(master, text="Number of runs").grid(row=11)
		e2 = Entry(master, width=5)
		e2.insert(0, input_number_runs)
		e2.grid(row=12)

		Label(master, text="").grid(row=13)

		Label(master, text="Number of TRs (ignore if different for different runs)").grid(row=14)
		e5 = Entry(master, width=5)
		e5.insert(0, input_number_TRs)
		e5.grid(row=15)

		Label(master, text="").grid(row=16)

		Label(master, text="Length of TR (in seconds)").grid(row=17)
		e6 = Entry(master, width=5)
		e6.insert(0, input_TR_length)
		e6.grid(row=18)

		Label(master, text="").grid(row=19)

		Label(master, text="Number of timing files").grid(row=20)
		e7 = Entry(master, width=5)
		e7.insert(0, input_number_timing_files)
		e7.grid(row=21)

		Label(master, text="").grid(row=22)

		Button(master, text='Submit', command=entry_fields).grid(row=23, sticky=S,
																 pady=4)
		Button(master, text='Cancel', command=exitscript).grid(row=24, sticky=S,
																 pady=4)

		master.update_idletasks()
		windowheight = master.winfo_height()
		windowwidth = master.winfo_width()
		positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
		positionDown = screeny + int(screenheight / 2 - windowheight / 2)
		master.geometry("+%s+%s" % (positionRight, positionDown))

		mainloop()

		####################################################################################################
		####################################################################################################
		##### GUI Window: Stimulus/Timing/Onset Folder #####

		stim_folder = None

		def entry_fields10():
			global stim_folder
			stim_folder = e2.get()
			master.destroy()

		def exitscript():
			sys.exit()

		master = Tk()
		master.title("Input info")
		master.geometry('+1070+500')
		master.wm_attributes("-topmost", 1)

		Label(master, text="What is the name of the folder (for each subject) where timing files are stored?").grid(
			row=0, column=0, columnspan=2)

		Label(master, text="").grid(row=1, column=0)

		Label(master,
			  text='For any strings that refer to individual subject numbers, use "$subj"\n"$subj" =  %s, %s, %s....' % (
			  newlist[0], newlist[1], newlist[2])).grid(row=2, padx=10, columnspan=2)

		Label(master, text="").grid(row=3, column=0)

		Label(master, text='%s/"$subj"/' % main_dir).grid(row=4, column=0, padx=20)
		e2 = Entry(master, width=50)
		e2.insert(0, input_onsets_folder)
		e2.grid(row=4, column=1, padx=20)

		Button(master, text='Submit', command=entry_fields10).grid(row=5, sticky=S, pady=4,
																   columnspan=2)
		Button(master, text='Cancel', command=exitscript).grid(row=6, sticky=S, pady=4,
																   columnspan=2)

		master.update_idletasks()
		windowheight = master.winfo_height()
		windowwidth = master.winfo_width()
		positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
		positionDown = screeny + int(screenheight / 2 - windowheight / 2)
		master.geometry("+%s+%s" % (positionRight, positionDown))

		mainloop()

		timing_files_folder = stim_folder

		stim_folder = main_dir + '/"$subj"/' + stim_folder


		####################################################################################################
		####################################################################################################
		##### GUI Window: Stimulus/Timing/Onset Files #####

		run_number = int(run_number)
		stim_files = []
		covariate = None

		timing_entries = {}
		timing_entries_outcome = {}
		for timing_file_index in range(0, int(number_timing_files)):
			timing_entries[timing_file_index] = None

		def entry_fields1():
			global timing_entries
			for item in timing_entries:
				timing_entries_outcome[item] = timing_entries[item].get()
			master.destroy()


		def covariate_q():
			global covariate
			covariate = str(var1.get())

		def exitscript():
			sys.exit()


		master = Tk()
		master.title("Input info")
		master.geometry('+1070+500')
		master.wm_attributes("-topmost", 1)

		Label(master,
			  text='For any strings that refer to individual subject numbers, use "$subj"\n"$subj" =  %s, %s, %s....' % (
			  newlist[0], newlist[1], newlist[2])).grid(row=0, padx=10, columnspan=2)

		Label(master, text='''These should all be located in the directory:\n'%s' ''' % stim_folder).grid(row=1,
																										  padx=10,
																										  columnspan=2)

		Label(master, text="").grid(row=2)

		Label(master, text="Input the paths for an individual subject's timing/onset files").grid(row=3, padx=10,
																								  columnspan=2)

		Label(master, text="").grid(row=4)

		Label(master, text="").grid(row=7)

		count = 8
		for timing_file_index in range(0, int(number_timing_files)):
			timing_entries[timing_file_index] = StringVar()
			Label(master, text="Timing File %s" % (timing_file_index + 1)).grid(row=count, column=0)
			entry = Entry(master, textvariable=timing_entries[timing_file_index], width=50)
			if len(timings) >= timing_file_index + 1:
				entry.insert(0, timings[timing_file_index])
			entry.grid(row=count, column=1)
			count += 1

		Label(master, text="").grid(row=count)

		var1 = IntVar()

		if input_trial_covariate == "Yes":
			var1.set(1)
			covariate = str(var1.get())
		elif input_trial_covariate == "No":
			var1.set(2)
			covariate = str(var1.get())

		Label(master, text="Do your timing files have covariates (e.g. RT), implemented with '*'?").grid(row=count+1,
																										 padx=20,
																										 columnspan=2)
		Radiobutton(master, text="Yes", padx=20, variable=var1, value=1, command=covariate_q).grid(row=count+2, columnspan=2)
		Radiobutton(master, text="No", padx=20, variable=var1, value=2, command=covariate_q).grid(row=count+3, columnspan=2)

		Label(master, text="").grid(row=count+4)

		Button(master, text='Submit', command=entry_fields1).grid(row=count+5, sticky=S, pady=4,
																  columnspan=2)
		Button(master, text='Cancel', command=exitscript).grid(row=count + 6, sticky=S, pady=4,
																  columnspan=2)

		master.update_idletasks()
		windowheight = master.winfo_height()
		windowwidth = master.winfo_width()
		positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
		positionDown = screeny + int(screenheight / 2 - windowheight / 2)
		master.geometry("+%s+%s" % (positionRight, positionDown))

		mainloop()

		for item in timing_entries_outcome:
			if not timing_entries_outcome[item]:
				sys.exit("Please make sure to include a name for each timing file.")

		key_list = sorted(timing_entries_outcome)
		for item in key_list:
			stim_files.append(timing_entries_outcome[item])

		####################################################################################################
		####################################################################################################
		##### Cleans up timing files provided #####

		estimated_stim_names = []  # From each timing file, removes path and, if present, removes "$subj"
		for file in stim_files:
			if "/" in file:
				j = file.rfind("/")
				name = file[j + 1:-4]
			else:
				if file.endswith(".txt"):
					name = file[:-4]
				elif file.endswith(".1D"):
					name = file[:-2]
				else:
					sys.exit("Please make sure to provide timing files in either '.txt' or '.1D' format,")
			k = name.find('"$subj"')
			if k > (-1):
				newername = name[:k] + name[k + 7:]

			else:
				newername = name
			if newername[0] in ["_", ".", "-", "#"]:
				newestname = newername[1:]
			else:
				newestname = newername
			estimated_stim_names.append(newestname)

		####################################################################################################
		####################################################################################################
		##### GUI Window: Timing File Names #####

		stim_names = []

		estimated_stim_names_entries = {}
		estimated_stim_names_entries_outcome = {}
		for timing_file_index in range(0, int(number_timing_files)):
			estimated_stim_names_entries[timing_file_index] = None

		def entry_fields2():
			global estimated_stim_names_entries
			for item in estimated_stim_names_entries:
				estimated_stim_names_entries_outcome[item] = estimated_stim_names_entries[item].get()
			master.destroy()

		def exitscript():
			sys.exit()


		master = Tk()
		master.title("Input info")
		master.geometry('+1070+500')
		master.wm_attributes("-topmost", 1)

		Label(master,
			  text='For any strings that refer to individual subject numbers, use "$subj"\n"$subj" =  %s, %s, %s....' % (
			  newlist[0], newlist[1], newlist[2])).grid(row=0, padx=10, columnspan=2)

		Label(master, text='''$stim_dir refers to the directory:\n'%s/"$subj"/' ''' % main_dir).grid(row=1, padx=10,
																									 columnspan=2)

		Label(master, text="").grid(row=2)

		Label(master,
			  text="Choose names corresponding to each timing/onset file. The script has guessed at possible names.").grid(
			row=3, padx=10, columnspan=2)

		Label(master, text="").grid(row=4)

		Label(master, text="").grid(row=5)

		count = 6
		for timing_file_index in range(0, int(number_timing_files)):
			estimated_stim_names_entries[timing_file_index] = StringVar()
			Label(master, text=stim_files[timing_file_index]).grid(row=count, column=0, padx=20)
			entry = Entry(master, textvariable=estimated_stim_names_entries[timing_file_index], width=50)
			entry.insert(0, estimated_stim_names[timing_file_index])
			entry.grid(row=count, column=1, padx=20)
			count += 1

		Label(master, text="").grid(row=count+2)

		Button(master, text='Submit', command=entry_fields2).grid(row=count+3, sticky=S, pady=4,
																  columnspan=2)
		Button(master, text='Cancel', command=exitscript).grid(row=count+4, sticky=S, pady=4,
																  columnspan=2)

		master.update_idletasks()
		windowheight = master.winfo_height()
		windowwidth = master.winfo_width()
		positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
		positionDown = screeny + int(screenheight / 2 - windowheight / 2)
		master.geometry("+%s+%s" % (positionRight, positionDown))

		mainloop()


		for item in estimated_stim_names_entries_outcome:
			if not estimated_stim_names_entries_outcome[item]:
				sys.exit("Please make sure to include a name for each timing file.")

		key_list = sorted(estimated_stim_names_entries_outcome)
		for item in key_list:
			stim_names.append(estimated_stim_names_entries_outcome[item])

		for item in stim_names:
			if " " in item:
				sys.exit("Stimulus names cannot include spaces!")

		####################################################################################################
		####################################################################################################
		##### GUI Window: GLTs (contrasts in AFNI) #####

		glt_contrasts = []

		glt_contrasts_entries = {}
		glt_contrasts_entries_outcome = {}

		if len(stim_files) > 2:
			number_of_glt_possibilities = 5
		else:
			number_of_glt_possibilities = 1  # if there are only 2 stimulus types, cannot perform more than one contrast
		for index in range(0, number_of_glt_possibilities):
			glt_contrasts_entries[index] = None

		if len(stim_names) > 1:  # Cannot perform a contrast with only 1 stimulus type
			def entry_fields3():
				global glt_contrasts_entries
				for item in glt_contrasts_entries:
					glt_contrasts_entries_outcome[item] = glt_contrasts_entries[item].get()
				master.destroy()


			def no_glts():
				master.destroy()


			def exitscript():
				sys.exit()


			master = Tk()
			master.title("Input info")
			master.geometry('+1070+500')
			master.wm_attributes("-topmost", 1)

			Label(master,
				  text="Input the names for GLTs (contrasts in AFNI).\n\nThese must be in the format:\n[Stim] -[Stim]\n(space, minus, no space)\nE.g.:   %s -%s\n\nOnly enter as many GLTs as you want to include." % (
				  stim_names[0], stim_names[1])).grid(row=0, padx=10, columnspan=2)

			Label(master, text="").grid(row=1)

			Label(master, text="For reference, the stim names are:").grid(row=2, padx=10, columnspan=2)

			Label(master, text="").grid(row=3)

			count = 4
			for index in range(0, len(stim_names)):
				Label(master, text=stim_names[index]).grid(row=count, padx=10, columnspan=2)
				count += 1

			Label(master, text="").grid(row=count)
			count += 1

			new_count = 1
			for index in range(0, number_of_glt_possibilities):
				glt_contrasts_entries[index] = StringVar()
				Label(master, text="GLT (contrast) %s" % (index + 1)).grid(row=count, column=0)
				entry = Entry(master, textvariable=glt_contrasts_entries[index], width=50)
				if new_count == 1:
					entry.insert(0, '%s -%s' % (stim_names[0], stim_names[1]))

				entry.grid(row=count, column=1)
				count += 1
				new_count += 1

			Label(master, text="").grid(row=count)

			Button(master, text='Submit', command=entry_fields3).grid(row=count+1, sticky=S, pady=4, columnspan=2)

			Button(master, text="Skip GLTs (don't create contrasts)", command=no_glts).grid(row=count+2, sticky=S, pady=4,
																							columnspan=2)  # See "no_glts"; this button closes the window without recording any entered info
			Button(master, text='Cancel', command=exitscript).grid(row=count + 3, sticky=S, pady=4, columnspan=2)

			master.update_idletasks()
			windowheight = master.winfo_height()
			windowwidth = master.winfo_width()
			positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
			positionDown = screeny + int(screenheight / 2 - windowheight / 2)
			master.geometry("+%s+%s" % (positionRight, positionDown))

			mainloop()


			key_list = sorted(glt_contrasts_entries)
			for item in key_list:
				glt_contrasts.append(glt_contrasts_entries_outcome[item])

		else:  # You can't create a contrast with only one stimulus type
			def no_glts():
				master.destroy()

			def exitscript():
				sys.exit()

			master = Tk()
			master.title("Input info")
			master.geometry('+1070+500')
			master.wm_attributes("-topmost", 1)

			Label(master, text="You cannot create contrasts with only 1 stim file").grid(row=0, padx=10)
			Label(master, text="").grid(row=1)
			Button(master, text="Skip GLTs (don't create contrasts)", command=no_glts).grid(row=2, sticky=S, pady=4)
			Button(master, text='Cancel', command=exitscript).grid(row=3, sticky=S, pady=4, columnspan=2)

			master.update_idletasks()
			windowheight = master.winfo_height()
			windowwidth = master.winfo_width()
			positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
			positionDown = screeny + int(screenheight / 2 - windowheight / 2)
			master.geometry("+%s+%s" % (positionRight, positionDown))

			mainloop()

		####################################################################################################
		####################################################################################################
		##### Clean up GLTs provided #####

		new_glts = []

		for contrast in glt_contrasts:
			if contrast:
				new_glts.append(contrast)

		estimate_glt_names = []
		for contrast in new_glts:  # Changes "Stim1 -Stim2" to "Stim1-Stim2"
			j = contrast.find(" -")
			new_glt_name = contrast[:j] + contrast[j + 1:]
			estimate_glt_names.append(new_glt_name)

		####################################################################################################
		####################################################################################################
		##### GUI Window: GLTs (contrasts in AFNI) #####

		if len(new_glts) > 0:
			glt_names = []

			glt_names_entries = {}
			glt_names_entries_outcome = {}

			for index in range(0, len(new_glts)):
				glt_names_entries[index] = None


			def entry_fields4():
				global glt_names_entries
				for item in glt_names_entries:
					glt_names_entries_outcome[item] = glt_names_entries[item].get()
				master.destroy()

			def exitscript():
				sys.exit()

			master = Tk()
			master.title("Input info")
			master.geometry('+1070+500')
			master.wm_attributes("-topmost", 1)

			Label(master,
				  text="Choose names corresponding to each GLT (contrast). The script has guessed at possible names.").grid(
				row=3, padx=10, columnspan=2)

			Label(master, text="").grid(row=4)

			Label(master, text="").grid(row=7)

			count = 8
			for index in range(0, len(new_glts)):
				glt_names_entries[index] = StringVar()
				Label(master, text=new_glts[index]).grid(row=count, column=0)
				entry = Entry(master, textvariable=glt_names_entries[index], width=50)
				entry.insert(0, estimate_glt_names[index])
				entry.grid(row=count, column=1)
				count +=1


			Label(master, text="").grid(row=count)

			Button(master, text='Submit', command=entry_fields4).grid(row=count+1, sticky=S, pady=4, columnspan=2)
			Button(master, text='Cancel', command=exitscript).grid(row=count+2, sticky=S, pady=4, columnspan=2)

			master.update_idletasks()
			windowheight = master.winfo_height()
			windowwidth = master.winfo_width()
			positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
			positionDown = screeny + int(screenheight / 2 - windowheight / 2)
			master.geometry("+%s+%s" % (positionRight, positionDown))

			mainloop()

			for item in glt_names_entries_outcome:
				if not glt_names_entries_outcome[item]:
					sys.exit("Please make sure to include a name for each of your GLTs")

			key_list = sorted(glt_names_entries_outcome)
			for item in key_list:
				glt_names.append(glt_names_entries_outcome[item])


			for item in glt_names:
				if " " in item:
					sys.exit("GLT names cannot include spaces!")

		write_GLM_Script(tr_length, tr_count, participant_list, script_prefix, GLM_folder, choice_gam_tent,
						 stim_files, stim_names, timing_files_folder, covariate, new_glts, glt_names,
						 run_number, glm_template_file, main_dir, output_path)

		script_name = script_prefix + "_GLM_" + GLM_folder

		if backup:
			icarus_Backup(icarus_password, output_path, script_name, icarus_login, icarus_backup_path)


		####################################################################################################
		####################################################################################################
		##### Updating GLM Presets Control List #####

		if covariate == "1":
			trial_covariate = "Yes"
		elif covariate == "2":
			trial_covariate = "No"

		new_glm_control_list = ['script_prefix:' + script_prefix,
								'participant_list:' + participant_list,
								'GLM_name:' + GLM_folder,
								'initial_directory:' + main_dir,
								'number_runs:' + str(run_number),
								'number_TRs:' + str(tr_count),
								'TR_length:' + str(tr_length),
								'onsets_folder:' + timing_files_folder,
								'number_timing_files:' + number_timing_files,
								'trial_covariate:' + trial_covariate]

		for file in range(1, int(number_timing_files) + 1):
			if file < 10:
				file_0X = "0" + str(file)
			else:
				file_0X = str(file)
			new_glm_control_list.append('timing_file_' + file_0X + ":" + stim_files[file - 1])

		with open(glm_presets_control_file, 'w') as control_file:
			control_file.writelines('\n'.join(new_glm_control_list))

####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################


if "t-test" in type_selection:

	ttest_selection = None

	def sel(text):
		global ttest_selection
		ttest_selection = text
		master.destroy()


	master = Tk()
	master.title("Script Selection")
	master.geometry('+1070+500')  # sets the location of the window - format (+horiz+vert)
	master.wm_attributes("-topmost", 1)  # makes sure that the window appears on top of all other windows
	label = Label(master, text=str('How do you want to create your t-test script?\n')).grid(column=1, columnspan=5)
	label1 = Label(master, text=str('Auto:'), font='helvetica 14 bold').grid(column=1, columnspan=5)
	label2 = Label(master,
				   text=str('Use a .csv spreadsheet with parameters\nto automatically create a script with multiple t-tests'),
				   padx=20).grid(column=1, columnspan=5)
	label3 = Label(master, text=str('Manual:'), font='helvetica 14 bold').grid(column=1, columnspan=5)
	label4 = Label(master,
				   text=str('You provide input through pop-up\nwindows to create a single t-test script\n\n\n'),
				   padx=20).grid(column=1, columnspan=5)

	var1 = IntVar()
	user_button1 = Radiobutton(master, text="Auto", font='helvetica 20', padx=20, variable=var1,
							   command=lambda text="Auto": sel(text)).grid(sticky='w', column=3)
	var2 = IntVar()
	user_button2 = Radiobutton(master, text="Manual", font='helvetica 20', padx=20, variable=var2,
							   command=lambda text="Manual": sel(text)).grid(sticky='w', column=3)

	master.update_idletasks()
	windowheight = master.winfo_height()
	windowwidth = master.winfo_width()
	positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
	positionDown = screeny + int(screenheight / 2 - windowheight / 2)
	master.geometry("+%s+%s" % (positionRight, positionDown))

	mainloop()

	if not ttest_selection:
		sys.exit("Please select a method of t-test script generation.")

	if ttest_selection == "Manual":
		####################################################################################################
		####################################################################################################
		#### Preset Variables ####
		# The variables listed here are pre-entered in the pop-up entry boxes to save time.
		# These are determined by the textfile "ttest_presets_control_file.txt"
		# Every time you run this script, it will update the contents of "ttest_presets_control_file.txt", so that
		# when you run the script next time, the preset values will be the previous values you used last time
		# you ran the script.

		with open(ttest_presets_control_file) as control_file:
			ttest_presets_init = control_file.read().splitlines()
		ttest_presets = {}
		for item in ttest_presets_init:
			splits = item.split(":")
			ttest_presets[splits[0]] = splits[1]

		print(ttest_presets_control_file)
		print(ttest_presets)

		input_dset_prefix = ttest_presets['Dset_prefix']
		input_subj_results_directory = ttest_presets['Subj_results_directory']
		input_participants = ttest_presets['Participants']
		input_A_folder = ttest_presets['A_folder']
		input_A_labelname = ttest_presets['A_labelname']
		input_A_label = ttest_presets['A_label']
		input_B_folder = ttest_presets['B_folder']
		input_B_labelname = ttest_presets['B_labelname']
		input_B_label = ttest_presets['B_label']
		input_paired_ttest = ttest_presets['Paired_ttest']
		input_contrast_against_baseline = ttest_presets['Contrast_against_baseline']
		
		
		dset_prefix = None
		subj_results_directory = None
		participants = None
		A_folder = None
		A_labelname = None
		A_label = None
		B_folder = None
		B_labelname = None
		B_label = None
		paired_ttest = None
		contrast_against_baseline = None



		def entry_fields():
			global dset_prefix, subj_results_directory, participants, A_folder, A_labelname, A_label, B_folder, B_labelname, B_label
			dset_prefix = e1.get()
			subj_results_directory = e2.get()
			participants = e3.get()
			A_folder = e4.get()
			A_labelname = e5.get()
			A_label = e6.get()
			B_folder = e7.get()
			B_labelname = e8.get()
			B_label = e9.get()
			master.destroy()

		def sel():
			global paired_ttest
			paired_ttest = str(var.get())

		def sel1():
			global contrast_against_baseline
			contrast_against_baseline = str(var1.get())

		def exitscript():
			sys.exit()


		master = Tk()
		master.title("Input info")
		master.geometry('+1070+500')
		master.wm_attributes("-topmost", 1)
		var = IntVar()
		var1 = IntVar()
		if input_paired_ttest == "True":
			var.set(1)
			paired_ttest = str(var.get())
		elif input_paired_ttest == "False":
			var.set(2)
			paired_ttest = str(var.get())

		if input_contrast_against_baseline == "True":
			var1.set(1)
			contrast_against_baseline = str(var1.get())
		elif input_contrast_against_baseline == "False":
			var1.set(2)
			contrast_against_baseline = str(var1.get())


		Label(master, text="Please input the following:").grid(row=1, columnspan=2)
		Label(master, text= " ").grid(row=2, column=0)

		Label(master, text="T-test name:").grid(row=3, sticky='e')
		e1 = Entry(master)
		e1.insert(0, input_dset_prefix)
		e1.grid(row=3, column=1, sticky='w')

		Label(master, text="Subject results directory:").grid(row=4, sticky='e')
		e2 = Entry(master, width=45)
		e2.insert(0, input_subj_results_directory)
		e2.grid(row=4, column=1, sticky='w')

		Label(master, text="Participant list:").grid(row=5, sticky='e')
		e3 = Entry(master, width=45)
		e3.insert(0, input_participants)
		e3.grid(row=5, column=1, sticky='w')

		Label(master, text=" ").grid(row=6)

		Label(master, text='Name of the GLM folder for your "A" group:').grid(row=7, sticky='e')
		e4 = Entry(master)
		e4.insert(0, input_A_folder)
		e4.grid(row=7, column=1, sticky='w')

		Label(master, text='Name you would like to give your "A" group:').grid(row=8, sticky='e')
		e5 = Entry(master)
		e5.insert(0, input_A_labelname)
		e5.grid(row=8, column=1, sticky='w')

		Label(master, text='Label for "A" group (likely ending in "#0_Coef"):').grid(row=9, sticky='e')
		e6 = Entry(master, width=40)
		e6.insert(0, input_A_label)
		e6.grid(row=9, column=1, sticky='w')

		Label(master, text=" ").grid(row=10)

		Label(master, text='If you are performing a contrast against baseline, the "B" group options can be ignored.').grid(row=11, columnspan=2)

		Label(master, text='Name of the GLM folder for your "B" group\n(can be the same as "A" group):').grid(row=12, sticky='e')
		e7 = Entry(master)
		e7.insert(0, input_B_folder)
		e7.grid(row=12, column=1, sticky='w')

		Label(master, text='Name you would like to give your "B" group:').grid(row=13, sticky='e')
		e8 = Entry(master)
		e8.insert(0, input_B_labelname)
		e8.grid(row=13, column=1, sticky='w')

		Label(master, text='Label for "B" group (likely ending in "#0_Coef"):').grid(row=14, sticky='e')
		e9 = Entry(master, width=40)
		e9.insert(0, input_B_label)
		e9.grid(row=14, column=1, sticky='w')

		Label(master, text=" ").grid(row=15)

		Label(master, text="Is this a paired t-test?").grid(row=16, column=0)
		Radiobutton(master, text="Yes", padx=20, variable=var, value=1, command=sel).grid(row=17, column=0)
		Radiobutton(master, text="No", padx=20, variable=var, value=2, command=sel).grid(row=18, column=0)

		Label(master, text="Is this a contrast against baseline (one group only)?").grid(row=16, column=1)
		Radiobutton(master, text="Yes", padx=20, variable=var1, value=1, command=sel1).grid(row=17, column=1)
		Radiobutton(master, text="No", padx=20, variable=var1, value=2, command=sel1).grid(row=18, column=1)

		Label(master, text=" ").grid(row=19)

		Button(master, text='Submit', command=entry_fields).grid(row=20, sticky=S,
																 pady=4, columnspan=2)  # create a "Submit" button that triggers the above "entry_fields" function
		Button(master, text='Cancel', command=exitscript).grid(row=21, sticky=S,
															   pady=4, columnspan=2)  # create a "Submit" button that triggers the above "entry_fields" function

		master.update_idletasks()
		windowheight = master.winfo_height()
		windowwidth = master.winfo_width()
		positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
		positionDown = screeny + int(screenheight / 2 - windowheight / 2)
		master.geometry("+%s+%s" % (positionRight, positionDown))

		mainloop()

		print(dset_prefix)

		script_name = "proc.ttest." + dset_prefix
		output_file = output_path + "/" + script_name
		if os.path.exists(output_file):
			sys.exit("That file already exists!")

		if paired_ttest == "1":
			paired_ttest = True
		elif paired_ttest == "2":
			paired_ttest = False
		else:
			sys.exit(
				"Please make sure to choose between a paired and unpaired t-test.")

		if contrast_against_baseline == "1":
			contrast_against_baseline = True
		elif contrast_against_baseline == "2":
			contrast_against_baseline = False
		else:
			sys.exit(
				"Please make sure to choose if this is a contrast against baseline.")

		participants_init = participants.split(" ")
		participants = []
		for participant in participants_init:
			if "(" in participant:
				participant = participant.replace("(", "")
			if ")" in participant:
				participant = participant.replace(")", "")
			if "," in participant:
				participant = participant.replace(",", "")
			participants.append(participant)

		if len(A_labelname) > 63 or len(B_labelname) > 63:
			print("Warning!! Check to make sure you are using the right labels - AFNI preprocessing usually truncates very long label names")

		paired_parameter = ''
		if paired_ttest:
			paired_parameter = '-paired'

		contrast = '-AminusB'
		if contrast_against_baseline:
			contrast = ''
			paired_parameter = ''  # contrast against baseline, by definition, cannot be paired
			if paired_ttest:
				print("Warning - you've declared this to be both a paired t-test and a test against baseline (which is unpaired). Assuming test against baseline and ignoring paired parameter.")

		####################################################################################################
		####################################################################################################
		##### Prepping Script Text Blocks #####

		set_A_block = '-setA %s                                                                         ' % A_labelname
		set_A_block = set_A_block + '                                      \\'
		set_A_count = 1
		for participant in participants:
			set_A_block = set_A_block + '\n          %s' % set_A_count
			set_A_block = set_A_block + '                                                                              '
			set_A_block = set_A_block + '                                         \\\n'
			set_A_block = set_A_block + '          "$dirA/subj.%s/%s.results/%s/stats.%s+tlrc[%s]"      \\\n' % (
				participant, participant, A_folder, participant, A_label)
			set_A_block = set_A_block + '                                                                              '
			set_A_block = set_A_block + '                                                    \\'
			set_A_count += 1

		set_B_block = ''
		if not contrast_against_baseline:
			set_A_block = set_A_block + '\n                                                                              '
			set_A_block = set_A_block + '                                                   \\'
			set_B_block = '-setB %s                                                                         ' % B_labelname
			set_B_block = set_B_block + '                                      \\'
			set_B_count = 1
			for participant in participants:
				set_B_block = set_B_block + '\n          %s' % set_B_count
				set_B_block = set_B_block + '                                                                              '
				set_B_block = set_B_block + '                                         \\\n'
				set_B_block = set_B_block + '          "$dirA/subj.%s/%s.results/%s/stats.%s+tlrc[%s]"      \\\n' % (
					participant, participant, B_folder, participant, B_label)
				set_B_block = set_B_block + '                                                                              '
				set_B_block = set_B_block + '                                                    \\'
				set_B_count += 1

		####################################################################################################
		####################################################################################################
		##### Generating AFNI Script #####


		# Write the text file. The full text below (plus the variables added, denoted by "%s") is the generated script.
		textfile = open(output_file, 'w')
		textfile.write(
'''
#!/bin/tcsh -xef

# execute via :
#   tcsh -xef %s |& tee output.%s

# ---------------------- set process variables ----------------------

set dirA = %s

# specify and possibly create results directory
set results_dir = test.results
if ( ! -d $results_dir ) mkdir $results_dir

# ------------------------- process the data -------------------------
# --- %s ---


3dttest++ -prefix $results_dir/%s %s %s                                                                       \\
		  -Clustsim                                                                                                               \\
																																  \\
		  %s
		  %s

''' % (script_name, script_name, subj_results_directory, dset_prefix, dset_prefix, contrast, paired_parameter, set_A_block, set_B_block))
		textfile.close()
		print("AFNI script generated: %s" % script_name)
		print("\nRun command:\n tcsh -xef %s |& tee output.%s" % (script_name, script_name))

		####################################################################################################
		####################################################################################################
		####################################################################################################
		##### Updating t-test Presets Control List #####

		print(dset_prefix)

		new_control_list = ['Dset_prefix:' + dset_prefix,
							'Subj_results_directory:' + subj_results_directory,
							'Participants:' + " ".join(participants),
							'A_folder:' + A_folder,
							'A_labelname:' + A_labelname,
							'A_label:' + A_label,
							'B_folder:' + B_folder,
							'B_labelname:' + B_labelname,
							'B_label:' + B_label,
							'Paired_ttest:' + str(paired_ttest),
							'Contrast_against_baseline:' + str(contrast_against_baseline),
							'Auto_filename:' + ttest_presets['Auto_filename']]

		with open(ttest_presets_control_file, 'w') as control_file:
			control_file.writelines('\n'.join(new_control_list))


	####################################################################################################
	####################################################################################################


	if ttest_selection == "Auto":

		with open(ttest_presets_control_file) as control_file:
			ttest_presets_init = control_file.read().splitlines()
		ttest_presets = {}
		for item in ttest_presets_init:
			splits = item.split(":")
			ttest_presets[splits[0]] = splits[1]

		input_auto_filename = ttest_presets['Auto_filename']


		auto_filename = None



		def entry_fields():
			global auto_filename
			auto_filename = e1.get()
			master.destroy()

		def exitscript():
			sys.exit()


		master = Tk()
		master.title("Input info")
		master.geometry('+1070+500')
		master.wm_attributes("-topmost", 1)

		Label(master, text="What would you like to name your script?").grid(row=1, padx=20)

		e1 = Entry(master)
		e1.insert(0, input_auto_filename)
		e1.grid(row=2)

		Label(master, text=" ").grid(row=3)

		Button(master, text='Submit', command=entry_fields).grid(row=4, sticky=S,
																 pady=4)  # create a "Submit" button that triggers the above "entry_fields" function
		Button(master, text='Cancel', command=exitscript).grid(row=5, sticky=S,
															   pady=4)  # create a "Submit" button that triggers the above "entry_fields" function

		master.update_idletasks()
		windowheight = master.winfo_height()
		windowwidth = master.winfo_width()
		positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
		positionDown = screeny + int(screenheight / 2 - windowheight / 2)
		master.geometry("+%s+%s" % (positionRight, positionDown))

		mainloop()


		script_name = "proc.ttest." + auto_filename
		output_file = output_path + "/" + script_name
		if os.path.exists(output_file):
			sys.exit("That file already exists!")



		####################################################################################################
		####################################################################################################

		data_dict_list = []
		data_file = path + '/ttest_parameters.csv'
		with open(data_file) as csvfile:
			data_dict_list = [{k: v for k, v in row.items()} for row in csv.DictReader(csvfile, skipinitialspace=True)]

		count = 0
		for ttest in data_dict_list:
			if ttest['Participants']:
				count += 1
				subj_results_directory = ttest['Subj_results_directory']
				dset_prefix = ttest['Dset_prefix']

				if ttest['Paired_ttest'].lower() in ['t', 'true']:
					paired_ttest = True
				elif ttest['Paired_ttest'].lower() in ['f', 'false']:
					paired_ttest = False
				else:
					sys.exit("Please make sure that '%s' has a 'True' or 'False' value for the 'Paired_ttest' parameter." % dset_prefix)

				if ttest['Contrast_against_baseline'].lower() in ['t', 'true']:
					contrast_against_baseline = True
				elif ttest['Contrast_against_baseline'].lower() in ['f', 'false']:
					contrast_against_baseline = False
				else:
					sys.exit(
						"Please make sure that '%s' has a 'True' or 'False' value for the 'Contrast_against_baseline' parameter." % dset_prefix)

				participants_init = ttest['Participants'].split(" ")
				participants = []
				for participant in participants_init:
					if "(" in participant:
						participant = participant.replace("(", "")
					if ")" in participant:
						participant = participant.replace(")", "")
					if "," in participant:
						participant = participant.replace(",", "")
					participants.append(participant)

				A_folder = ttest['A_folder']
				A_labelname = ttest['A_labelname']
				A_label = ttest['A_label']
				B_folder = ttest['B_folder']
				B_labelname = ttest['B_labelname']
				B_label = ttest['B_label']
				if len(A_labelname) > 63 or len(B_labelname) > 63:
					print("Warning!! Check to make sure you are using the right labels for %s - AFNI preprocessing usually truncates very long label names" % dset_prefix)

				paired_parameter = ''
				if paired_ttest:
					paired_parameter = '-paired'

				contrast = '-AminusB'
				if contrast_against_baseline:
					contrast = ''
					paired_parameter = ''  # contrast against baseline, by definition, cannot be paired
					if paired_ttest:
						print("Warning - for %s you've declared this to be both a paired t-test and a test against baseline (which is unpaired). Assuming test against baseline and ignoring paired parameter." % dset_prefix)


				####################################################################################################
				####################################################################################################
				##### Prepping Script Text Blocks #####

				set_A_block = '-setA %s                                                                         ' % A_labelname
				set_A_block = set_A_block + '                                      \\'
				set_A_count = 1
				for participant in participants:
					set_A_block = set_A_block + '\n          %s' % set_A_count
					set_A_block = set_A_block + '                                                                              '
					set_A_block = set_A_block + '                                         \\\n'
					set_A_block = set_A_block + '          "$dirA/subj.%s/%s.results/%s/stats.%s+tlrc[%s]"      \\\n' % (
					participant, participant, A_folder, participant, A_label)
					set_A_block = set_A_block + '                                                                              '
					set_A_block = set_A_block + '                                                    \\'
					set_A_count += 1

				set_B_block = ''
				if not contrast_against_baseline:
					set_A_block = set_A_block + '\n                                                                              '
					set_A_block = set_A_block + '                                                   \\'
					set_B_block = '-setB %s                                                                         ' % B_labelname
					set_B_block = set_B_block + '                                      \\'
					set_B_count = 1
					for participant in participants:
						set_B_block = set_B_block + '\n          %s' % set_B_count
						set_B_block = set_B_block + '                                                                              '
						set_B_block = set_B_block + '                                         \\\n'
						set_B_block = set_B_block + '          "$dirA/subj.%s/%s.results/%s/stats.%s+tlrc[%s]"      \\\n' % (
						participant, participant, B_folder, participant, B_label)
						set_B_block = set_B_block + '                                                                              '
						set_B_block = set_B_block + '                                                    \\'
						set_B_count += 1

				####################################################################################################
				####################################################################################################
				##### Generating AFNI Script #####

				if count == 1:
					textfile = open(output_file, 'w')
					textfile.write(
'''
#!/bin/tcsh -xef

# execute via :
#   tcsh -xef %s |& tee output.%s

# ---------------------- set process variables ----------------------

set dirA = %s

# specify and possibly create results directory
set results_dir = test.results
if ( ! -d $results_dir ) mkdir $results_dir
''' % (script_name, script_name, subj_results_directory))
				textfile.close()

				textfile = open(output_file, 'a')  # Create the textfile

				# Write the text file. The full text below (plus the variables added, denoted by "%s") is the generated script.
				textfile.write(
'''



# ------------------------- process the data -------------------------
# --- %s ---


3dttest++ -prefix $results_dir/%s %s %s                                                                       \\
		  -Clustsim                                                                                                               \\
		                                                                                                                          \\
		  %s
		  %s

''' % (dset_prefix, dset_prefix, contrast, paired_parameter, set_A_block, set_B_block))
			textfile.close()
		print("AFNI script generated: %s" % script_name)
		print("\nRun command:\n tcsh -xef %s |& tee output.%s" % (script_name, script_name))

		####################################################################################################
		####################################################################################################
		####################################################################################################
		##### Updating t-test Presets Control List #####

		new_control_list = ['Dset_prefix:' + ttest_presets['Dset_prefix'],
							'Subj_results_directory:' + ttest_presets['Subj_results_directory'],
							'Participants:' + ttest_presets['Participants'],
							'A_folder:' + ttest_presets['A_folder'],
							'A_labelname:' + ttest_presets['A_labelname'],
							'A_label:' + ttest_presets['A_label'],
							'B_folder:' + ttest_presets['B_folder'],
							'B_labelname:' + ttest_presets['B_labelname'],
							'B_label:' + ttest_presets['B_label'],
							'Paired_ttest:' + ttest_presets['Paired_ttest'],
							'Contrast_against_baseline:' + ttest_presets['Contrast_against_baseline'],
							'Auto_filename:' + auto_filename]

		with open(ttest_presets_control_file, 'w') as control_file:
			control_file.writelines('\n'.join(new_control_list))



####################################################################################################
####################################################################################################
####################################################################################################
##### Updating Presets Control List #####


new_control_list = ['backup_path:' + icarus_backup_path,
					'output_path:' + output_path,
					'icarus_login:' + icarus_login]

if password_save:
	new_control_list.append('icarus_password:' + icarus_password)
	new_control_list.append('password_save:' + str(password_save))
else:
	new_control_list.append('icarus_password:')
	new_control_list.append('password_save:' + str(password_save))

with open(presets_control_file, 'w') as control_file:
	control_file.writelines('\n'.join(new_control_list))