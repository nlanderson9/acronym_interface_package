####################################################################################################################
# ===Data Prep Script=== #

# ===Part of the Acronym Interface Package===#
####################################################################################################################

import os, csv
from Tkinter import *
import Setup_BIDS_Folder_Structure, DICOM_Files, NIfTI_Files, Create_AFNI_Timing_Files, Generate_BIDS_Event_Files

"""
This script is designed to be flexible and can easily be adapted to different individuals and projects.
All unique information is entered by dialog boxes (radiobuttons, text entry, etc) generated by the script.
Additionally, all unique information is then saved in a "presets" file to make speed later data entry.

This script is also intended to be used during the data collection process as a means of quality check and control.
It is ideally intended to run for each subject individually as their data is collected; however, the script can handle
processing participants in batches.


Currently, this script is capable of doing the following:
-Read basic stored information from a central spreadsheet (containing participant numbers, vcnumbers, scan dates, etc)
-Create a uniform folder structure for each participant, following the BIDS format
-Download raw MRI data (in DICOM format) from the CNDA
-Convert the DICOM files to NIfTI files
-Reorganize and rename the NIfTI files within the uniform file structure
-Code behavioral data and create BIDS-formatted event files
-Create timing files for AFNI


In order to do this, this script calls a number of dependent python scripts to perform many of these steps:
-Setup_BIDS_Folder_Structure.py
-DICOM_Files.py
-NIfTI_Files.py
-Generate_BIDS_Event_Files.py
-Create_AFNI_Timing_Files.py

For a visual overview, see the "Acronym_Interface_Package_overview.pdf"

This script strives to be consistent with the current BIDS specification: *** version 1.0.2 ***
(http://bids.neuroimaging.io/)
"""

####################################################################################################################
####################################################################################################################
####################################################################################################################
#
#
#
#
#
#
#
#
#
#
####################################################################################################################
# ===PREP BLOCK=== #
####################################################################################################################

##########################################################
# Downloads #

"""
In order to use this script, you must have several programs already installed on your computer. These are described
below, but are listed here:
pydicom - Python module, used for manipulation of DICOM files
dcm2niix - program for converting DICOM files to NIfTI files
sshpass - this allows for the script to use your Icarus login/password to send file backups to Icarus

***NOTE***
If you are running this script on Pegasus, all of the necessary installations from above have already been performed.
"""

##########################################################
"""
To rename DICOM folders, you must install the pydicom module for python. This can be done by typing the following
command into Terminal:

pip install pydicom
"""

##########################################################
"""
In order to convert files from DICOM to NIfTI (.nii), you need to have dcm2niix installed
(https://www.nitrc.org/projects/dcm2nii/).

***IMPORTANT: Previous versions of Data_Prep.py (called Data_Processing.py) have used dcm2nii, a deprecated version
of this tool.
Make sure that you have dcm2niix (ending in x) installed and set up in order for this script to work. The previous
version required manual modification of a preferences file in order to achieve the desired output; that is no longer
necessary.

(As a note, DICOM to NIfTI conversion can be performed manually using the MRIcroGL GUI, or through the command line.)
"""

# This path leads to where your dcm2niix tool is installed.  If you installed the folder in your Applications folder,
# this should not need to be changed; otherwise, edit this path:
dcm2niix_folder = '/Applications/MRIcroGL/dcm2niix'


##########################################################
'''In order to back up data to Icarus, you will need to install sshpass.
Instructions can be found here:
https://sourceforge.net/projects/sshpass/

sshpass must be installed in /usr/local/bin/
'''


####################################################################################################################
# ===SETTINGS BLOCK=== #
####################################################################################################################

path = os.path.dirname(os.path.realpath(__file__)) # this script's directory path

presets_control_file = path + "/presets_control_file.txt"

with open(presets_control_file) as control_file:
	presets_init = control_file.read().splitlines()
presets = {}
for item in presets_init:
	splits = item.split(":")
	presets[splits[0]] = splits[1]

input_project_name = presets['project_name']
input_number_of_sessions = presets['number_of_sessions']
input_id_prefix = presets['id_prefix']
input_task_code = presets['task_code']
input_folder = presets['folder']
input_icarus_folder = presets['icarus_folder']
input_raw_behavioral_folder = presets['raw_behavioral_folder']
input_CNDA_auto = presets['CNDA_auto']
input_use_participant_spreadsheet = presets['use_participant_spreadsheet']
input_participant_spreadsheet = presets['participant_spreadsheet']
input_CNDA_login = presets['CNDA_login']
input_CNDA_password = presets['CNDA_password']
input_icarus_login = presets['icarus_login']
input_icarus_password = presets['icarus_password']
input_show_notifications = presets['show_notifications']
input_password_save = presets['password_save']


####################################################################################################
####################################################################################################
##### Screen Size #####

# This is used to determine the size of your main screen
screensize_test = Tk()
pointer = screensize_test.winfo_pointerxy()
screensize_test.geometry('+%s+%s' % (pointer[0], pointer[1]))
screensize_test.update()
screensize_test.attributes("-alpha", 00)
screensize_test.state('zoomed')
screenheight = screensize_test.winfo_height()
screenwidth = screensize_test.winfo_width()
screenx = screensize_test.winfo_rootx()
screeny = screensize_test.winfo_rooty()
screensize_test.after(1, lambda: screensize_test.destroy())
mainloop()


####################################################################################################
####################################################################################################
##### GUI Window: Basic Script Parameters #####

project_name = None
number_of_sessions = None
id_prefix = None
task_code = None
folder = None
icarus_folder = None
raw_behavioral_folder = None
CNDA_auto = None
use_participant_spreadsheet = None
participant_spreadsheet = None
CNDA_login = None
CNDA_password = None
icarus_login = None
icarus_password = None
show_notifications = None
password_save = None

CNDA_auto_selection = None
participant_spreadsheet_selection = None
notifications_selection = None
password_save_selection = None

not_submitted = True


def entry_fields():
	global project_name, number_of_sessions, id_prefix, task_code, folder, icarus_folder, raw_behavioral_folder, participant_spreadsheet, CNDA_login, CNDA_password, icarus_login, icarus_password, not_submitted
	project_name = e1.get()
	number_of_sessions = e2.get()
	id_prefix = e3.get()
	task_code = e4.get()
	folder = e5.get()
	icarus_folder = e6.get()
	raw_behavioral_folder = e7.get()
	participant_spreadsheet = e8.get()
	CNDA_login = e9.get()
	CNDA_password = e10.get()
	icarus_login = e11.get()
	icarus_password = e12.get()
	not_submitted = False
	master.destroy()


def moreinfo():
	def exit_moreinfo():
		moreinfo.destroy()
	master.destroy()
	moreinfo = Tk()
	moreinfo.title("More Info")
	moreinfo.geometry('+1070+500')
	moreinfo.wm_attributes("-topmost", 1)
	Label(moreinfo, text='Project Name:').grid(sticky='e', row=1, column=0)
	Label(moreinfo, text='This is the name of your project as it appears on the CNDA, IRB, etc. (e.g. "NP1029")').grid(sticky='w', row=1, column=1)
	Label(moreinfo, text='Number of Sessions:').grid(sticky='e', row=2, column=0)
	Label(moreinfo, text='This is the number of sessions your experiment has. These can any type of session (MRI, behavioral, MRI + behavioral).').grid(sticky='w', row=2, column=1, padx=20)
	Label(moreinfo, text='ID Prefix:').grid(sticky='ne', row=3, column=0)
	Label(moreinfo, text='This is the identification code prefix you want to use for participants. This will appear in front of their subject number.\n'
						 'According the BIDS formatting: ensure that the code is all lower case and only includes letters/numbers.\n'
						 'For example, if your code is "abcd" participants will be named "abcd001", "abcd025", etc.\n'
						 'If you do not want to use an id code (i.e. numbers only), leave this box empty', justify='left').grid(sticky='w', row=3, column=1)
	Label(moreinfo, text='Task Code:').grid(sticky='ne', row=4, column=0)
	Label(moreinfo, text='This is the string of text that should appear in all of your task MRI scans\n'
						 '(anatomical, resting state, and fieldmap scans will be handled automatically).\n'
						 'This text string can appear anywhere in your scan name, but should appear in all task scans.', justify='left').grid(sticky='w', row=4, column=1)
	Label(moreinfo, text='Folder:').grid(sticky='e', row=5, column=0)
	Label(moreinfo, text='This is the top-level folder on your computer where all data and analysis will be saved').grid(sticky='w', row=5, column=1)
	Label(moreinfo, text='Icarus Folder:').grid(sticky='e', row=6, column=0)
	Label(moreinfo, text='This is the folder ON ICARUS (not your local machine) where you want raw DICOM files backed up as .zip archives.').grid(sticky='w', row=6, column=1)
	Label(moreinfo, text='Raw Behavioral Folder:').grid(sticky='e', row=7, column=0)
	Label(moreinfo, text='This is the name of the subfolder for raw behavioral data (.csv, .log, .psydat).').grid(sticky='w', row=7, column=1)
	Label(moreinfo, text='CNDA Auto:').grid(sticky='ne', row=8, column=0)
	Label(moreinfo, text='If "Yes", the data automatically backed-up to the CNDA will be used.\n'
						 'If "No", the script will search for manually backed-up data.', justify='left').grid(sticky='w', row=8, column=1)
	Label(moreinfo, text='Use Participant Spreadsheet:').grid(sticky='ne', row=9, column=0, padx=20)
	Label(moreinfo, text='If "Yes", a formatted .csv file will be used to provide participant data.\n'
						 'If "No", participant data will need to be entered manually in later windows.', justify='left').grid(sticky='w', row=9, column=1)
	Label(moreinfo, text='Participant Spreadsheet:').grid(sticky='e', row=10, column=0)
	Label(moreinfo, text="If you've chosen to use a participant spreadsheet, this is the path for the .csv file.").grid(sticky='w', row=10, column=1)
	Label(moreinfo, text='CNDA Login/Password:').grid(sticky='e', row=11, column=0)
	Label(moreinfo, text='Your login and password to the CNDA (cnda.wustl.edu)').grid(sticky='w', row=11, column=1)
	Label(moreinfo, text='Icarus Login/Password:').grid(sticky='e', row=12, column=0)
	Label(moreinfo, text='Your login and password for Icarus (icarus.neuroimage.wustl.edu)').grid(sticky='w', row=12, column=1)
	Label(moreinfo, text='Show notifications:').grid(sticky='ne', row=13, column=0)
	Label(moreinfo, text='If "Yes", a 5-second notification will appear on your screen after the completion of\n'
						 'long-duration tasks, such as downloading fMRI data.', justify='left').grid(sticky='w', row=13, column=1)
	Label(moreinfo, text='Save passwords in presets:').grid(sticky='ne', row=14, column=0)
	Label(moreinfo, text='If "Yes", your CNDA and Icarus passwords will be saved in "presets_control_file.txt"\n'
						 'and will be auto-filled when this script is subsequently run.', justify='left').grid(sticky='w', row=14, column=1)
	Label(moreinfo, text=' ').grid()
	Button(moreinfo, text='Go Back', command=exit_moreinfo).grid(columnspan=2)

	moreinfo.update_idletasks()
	windowheight = moreinfo.winfo_height()
	windowwidth = moreinfo.winfo_width()
	positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
	positionDown = screeny + int(screenheight / 2 - windowheight / 2)
	moreinfo.geometry("+%s+%s" % (positionRight, positionDown))

	mainloop()


def sel1():
	global CNDA_auto_selection
	CNDA_auto_selection = str(var1.get())

def sel2():
	global participant_spreadsheet_selection
	participant_spreadsheet_selection = str(var2.get())

def sel3():
	global notifications_selection
	notifications_selection = str(var3.get())

def sel4():
	global password_save_selection
	password_save_selection = str(var4.get())


def exitscript():
	sys.exit()

while not_submitted:
	master = Tk()
	master.title("Input info")
	master.geometry('+1070+500')
	master.wm_attributes("-topmost", 1)
	var1 = IntVar()
	var2 = IntVar()
	var3 = IntVar()
	var4 = IntVar()
	if input_CNDA_auto == "True":
		var1.set(1)
		CNDA_auto_selection = str(var1.get())
	elif input_CNDA_auto == "False":
		var1.set(2)
		CNDA_auto_selection = str(var1.get())
	if input_use_participant_spreadsheet == "True":
		var2.set(1)
		participant_spreadsheet_selection = str(var2.get())
	elif input_use_participant_spreadsheet == "False":
		var2.set(2)
		participant_spreadsheet_selection = str(var2.get())
	if input_show_notifications == "True":
		var3.set(1)
		notifications_selection = str(var3.get())
	elif input_show_notifications == "False":
		var3.set(2)
		notifications_selection = str(var3.get())
	if input_password_save == "True":
		var4.set(1)
		password_save_selection = str(var4.get())
	elif input_password_save == "False":
		var4.set(2)
		password_save_selection = str(var4.get())

	Label(master, text='The following settings will likely remain constant for a given experiment.\nFor clarification on any of these,').grid(row=1, column=0, padx=20, columnspan=3)
	Button(master, text='click for more info', command=moreinfo).grid(row=3, columnspan=3)
	Label(master, text=' ').grid(row=4)

	Label(master, text='Project Name').grid(row=5, column=0, padx=20, sticky='e')
	e1 = Entry(master)
	e1.insert(0, input_project_name)
	e1.grid(row=5, column=1, padx=20)

	Label(master, text='Number of Sessions').grid(row=6, column=0, padx=20, sticky='e')
	e2 = Entry(master)
	e2.insert(0, input_number_of_sessions)
	e2.grid(row=6, column=1, padx=20)

	Label(master, text='ID Prefix').grid(row=7, column=0, padx=20, sticky='e')
	e3 = Entry(master)
	e3.insert(0, input_id_prefix)
	e3.grid(row=7, column=1, padx=20)

	Label(master, text='Task Code').grid(row=8, column=0, padx=20, sticky='e')
	e4 = Entry(master)
	e4.insert(0, input_task_code)
	e4.grid(row=8, column=1, padx=20)

	Label(master, text='Folder').grid(row=9, column=0, padx=20, sticky='e')
	e5 = Entry(master, width=45)
	e5.insert(0, input_folder)
	e5.grid(row=9, column=1, padx=20, columnspan=2)

	Label(master, text='Icarus Folder').grid(row=10, column=0, padx=20, sticky='e')
	e6 = Entry(master, width=45)
	e6.insert(0, input_icarus_folder)
	e6.grid(row=10, column=1, padx=20)

	Label(master, text='Raw Behavioral Folder').grid(row=11, column=0, padx=20, sticky='e')
	e7 = Entry(master, width=45)
	e7.insert(0, input_raw_behavioral_folder)
	e7.grid(row=11, column=1, padx=20)

	Label(master, text="---------------------------------------------------------").grid(row=12, columnspan=2)

	Label(master, text='CNDA Auto?').grid(row=13, column=0, padx=20)
	Radiobutton(master, text="Yes", padx=20, variable=var1, value=1, command=sel1).grid(row=14)
	Radiobutton(master, text="No", padx=20, variable=var1, value=2, command=sel1).grid(row=15)

	Label(master, text='Use participant spreadsheet?').grid(row=13, column=1, padx=20)
	Radiobutton(master, text="Yes", padx=20, variable=var2, value=1, command=sel2).grid(row=14, column=1)
	Radiobutton(master, text="No", padx=20, variable=var2, value=2, command=sel2).grid(row=15, column=1)

	Label(master, text="---------------------------------------------------------").grid(row=16, columnspan=2)

	Label(master, text='Participant spreadsheet').grid(row=18, column=0, padx=20, sticky='e')
	e8 = Entry(master, width=45)
	e8.insert(0, input_participant_spreadsheet)
	e8.grid(row=18, column=1, padx=20, columnspan=2)

	Label(master, text='CNDA Login').grid(row=19, column=0, padx=20, sticky='e')
	e9 = Entry(master)
	e9.insert(0, input_CNDA_login)
	e9.grid(row=19, column=1, padx=20)

	Label(master, text='CNDA Password').grid(row=20, column=0, padx=20, sticky='e')
	e10 = Entry(master)
	e10.insert(0, input_CNDA_password)
	e10.grid(row=20, column=1, padx=20)

	Label(master, text='Icarus Login').grid(row=21, column=0, padx=20, sticky='e')
	e11 = Entry(master)
	e11.insert(0, input_icarus_login)
	e11.grid(row=21, column=1, padx=20)

	Label(master, text='Icarus Password').grid(row=22, column=0, padx=20, sticky='e')
	e12 = Entry(master)
	e12.insert(0, input_icarus_password)
	e12.grid(row=22, column=1, padx=20)

	Label(master, text='Show notifications?').grid(row=23, column=0, padx=20, columnspan=2)
	Radiobutton(master, text="Yes", padx=20, variable=var3, value=1, command=sel3).grid(row=24, columnspan=2)
	Radiobutton(master, text="No", padx=20, variable=var3, value=2, command=sel3).grid(row=25, columnspan=2)

	Label(master, text='Save passwords in presets?').grid(row=20, column=2, padx=20)
	Radiobutton(master, text="Yes", padx=20, variable=var4, value=1, command=sel4).grid(row=21, column=2)
	Radiobutton(master, text="No", padx=20, variable=var4, value=2, command=sel4).grid(row=22, column=2)

	Button(master, text='Submit', command=entry_fields).grid(row=26, sticky=S,
															 pady=4, columnspan=2)
	Button(master, text='Cancel', command=exitscript).grid(row=27, sticky=S,
															 pady=4, columnspan=2)

	master.update_idletasks()
	windowheight = master.winfo_height()
	windowwidth = master.winfo_width()
	positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
	positionDown = screeny + int(screenheight / 2 - windowheight / 2)
	master.geometry("+%s+%s" % (positionRight, positionDown))

	mainloop()


number_of_sessions = int(number_of_sessions)

if folder.endswith("/"):
	folder = folder[:-1]
if not folder.startswith("/"):
	folder = "/" + folder

if not icarus_folder.endswith("/"):
	icarus_folder = icarus_folder + "/"
if not icarus_folder.startswith("/"):
	icarus_folder = "/" + icarus_folder

if raw_behavioral_folder.endswith("/"):
	raw_behavioral_folder = raw_behavioral_folder[:-1]
if not raw_behavioral_folder.startswith("/"):
	raw_behavioral_folder = "/" + raw_behavioral_folder


if participant_spreadsheet_selection == "1":
	use_participant_spreadsheet = True
elif participant_spreadsheet_selection == "2":
	use_participant_spreadsheet = False
	
if use_participant_spreadsheet and not participant_spreadsheet.endswith(".csv"):
	sys.exit("Your participant spreadsheet must be a .csv file.")
if use_participant_spreadsheet and not participant_spreadsheet.startswith("/"):
	participant_spreadsheet = "/" + participant_spreadsheet

if CNDA_auto_selection == "1":
	CNDA_auto = True
elif CNDA_auto_selection == "2":
	CNDA_auto = False

if notifications_selection == "1":
	show_notifications = True
elif notifications_selection == "2":
	show_notifications = False

if password_save_selection == "1":
	password_save = True
elif password_save_selection == "2":
	password_save = False


####################################################################################################
####################################################################################################
##### Updating Presets Control List #####


new_control_list = ['project_name:' + project_name,
					'number_of_sessions:' + str(number_of_sessions),
					'id_prefix:' + id_prefix,
					'task_code:' + task_code,
					'folder:' + folder,
					'icarus_folder:' + icarus_folder,
					'raw_behavioral_folder:' + raw_behavioral_folder,
					'CNDA_auto:' + str(CNDA_auto),
					'use_participant_spreadsheet:' + str(use_participant_spreadsheet),
					'participant_spreadsheet:' + participant_spreadsheet]

if password_save:
	new_control_list.append('CNDA_login:' + CNDA_login)
	new_control_list.append('CNDA_password:' + CNDA_password)
	new_control_list.append('icarus_login:' + icarus_login)
	new_control_list.append('icarus_password:' + icarus_password)
	new_control_list.append('show_notifications:' + str(show_notifications))
	new_control_list.append('password_save:' + str(password_save))
else:
	new_control_list.append('CNDA_login:' + CNDA_login)
	new_control_list.append('CNDA_password:')
	new_control_list.append('icarus_login:' + icarus_login)
	new_control_list.append('icarus_password:')
	new_control_list.append('show_notifications:' + str(show_notifications))
	new_control_list.append('password_save:' + str(password_save))





with open(presets_control_file, 'w') as control_file:
	control_file.writelines('\n'.join(new_control_list))


####################################################################################################################
# ===Participant Spreadsheet Import=== #
####################################################################################################################

##########################################################
# ===Confirmation Window=== #
##########################################################

if use_participant_spreadsheet:
	root = Tk()  # create TKinter window
	root.title("Participant Spreadsheet Check")
	root.geometry('+1070+500')  # sets the location of the window - format (+horiz+vert)
	root.wm_attributes("-topmost", 1)  # makes sure that the window appears on top of all other windows
	label = Label(root)
	label.pack()
	label.config(text=str(
		"You've chosen to use a participant spreadsheet to store basic info - \n make sure you have updated & saved the spreadsheet before clicking 'continue'"))
	button = Button(root, text='Continue', width=25, command=root.destroy)  # button closes window when pressed
	button.pack()

	root.update_idletasks()
	windowheight = root.winfo_height()
	windowwidth = root.winfo_width()
	positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
	positionDown = screeny + int(screenheight / 2 - windowheight / 2)
	root.geometry("+%s+%s" % (positionRight, positionDown))

	root.mainloop()

	##########################################################
	# ===Import Spreadsheet ===#
	##########################################################

	with open(participant_spreadsheet) as csvfile:
		spreadsheet_list = [{k: v for k, v in row.items()} for row in csv.DictReader(csvfile, skipinitialspace=True)]

####################################################################################################################
# ===Script Process Selection Checkbutton=== #
# Presents user with checkbox window to select parts of the script they need to run
####################################################################################################################
multi_session = False
if number_of_sessions > 1:
	multi_session = True

# This is your list of options for a given session. All options must include the text "$session_number" - this will be
# automatically replaced by the number of the session where needed. The exception is if a step is only performed for
# the entire dataset (such as creating AFNI timing files, where each timing file contains all sessions).
list_base_options = ["Download Session $session_number$ fMRI data (DICOMs from CNDA)",
					 "Backup Session $session_number$ DICOMs to Icarus as .zip archive",
					 "Convert Session $session_number$ DICOMs to NIfTI files (using dcm2niix)",
					 "Reorganize Session $session_number$ NIfTI files",
					 "Code Session $session_number$ behavioral data",
					 "Create timing Files"]

session_option_count = 0
for item in list_base_options:
	if "$session_number$" in item:
		session_option_count += 1

sessionless_option_count = 0
for item in list_base_options:
	if "$session_number$" not in item:
		sessionless_option_count += 1


def base_options(session_number):
	use_base_options = list_base_options
	update_base_options = []
	for item in use_base_options:
		if "$session_number$" in item:
			update_base_options.append(item.replace("$session_number$", str(session_number)))
	return (update_base_options)


button_list = []
for session in range(1, number_of_sessions + 1):
	button_list = button_list + base_options(session)

for item in list_base_options:
	if "$session_number" not in item:
		button_list.append(item)

buttons = {}
for item in button_list:
	buttons[item] = 0
buttons_outcome = {}


def end():
	for item in buttons:
		buttons_outcome[item] = buttons[item].get()
	master.destroy()


def selectall():  # button function that selects all checkboxes
	for item in buttons:
		buttons[item].set(1)


def selectall_session(session_number):  # button function that selects all Session 1 checkboxes
	for item in buttons:
		if (" " + str(session_number)) in item:
			buttons[item].set(1)


def unselectall_session(session_number):  # button function that selects all Session 1 checkboxes
	for item in buttons:
		if (" " + str(session_number)) in item:
			buttons[item].set(0)

session_prefixes = []
for session in range(1, number_of_sessions + 1):
	session_prefixes.append(" " + str(session))

def selectall_sessionless():  # button function that selects all Session 1 checkboxes
	for item in buttons:
		if any(x in item for x in session_prefixes):
			pass
		else:
			buttons[item].set(1)


def unselectall_sessionless():  # button function that selects all Session 1 checkboxes
	for item in buttons:
		if any(x in item for x in session_prefixes):
			pass
		else:
			buttons[item].set(0)

def unselectall():  # button function that unselects all checkboxes
	for item in buttons:
		buttons[item].set(0)


def exitscript():
	sys.exit()


master = Tk()
master.title("Script Selection")
master.geometry('+1070+500')  # sets the location of the window - format (+horiz+vert)
master.wm_attributes("-topmost", 1)  # makes sure that the window appears on top of all other windows
label = Label(master, padx=20)
label.grid(row=1)
label.config(text=str('Select the following parts of the script you would like to run:'))

selectbutton = Button(master, text='Select all', command=selectall).grid(row=2)
unselectbutton = Button(master, text='Unselect all', command=unselectall).grid(row=3)


def index_match(option_name):
	list_starts = []
	for item in list_base_options:
		if "$session_number$" in item:
			start = item.find("$session_number$")
			list_starts.append(item[:start])
	count = 0
	for item in list_starts:
		count += 1
		if item in option_name:
			index_place = count
	return index_place

def index_match_no_session(option_name):
	list_starts = []
	for item in list_base_options:
		if "$session_number$" not in item:
			list_starts.append(item)
	count = 0
	for item in list_starts:
		count += 1
		if item == option_name:
			index_place = count
	return index_place


row_loop = 4
for session in range(1, number_of_sessions + 1):
	label = Label(master, padx=10)
	label.grid(row=row_loop)
	label.config(text=str('\n\nSession %s:\n' % session))
	row_loop += 1
	select_all = Button(master, text='Select All Session %s' % session,
						command=lambda session=session: selectall_session(session)).grid(row=row_loop)
	row_loop += 1
	unselect_all = Button(master, text='Unselect All Session %s' % session,
						  command=lambda session=session: unselectall_session(session)).grid(row=row_loop)
	row_loop += 1
	for item in buttons:
		if (" " + str(session)) in item:
			buttons[item] = IntVar()
			user_button = Checkbutton(master, text=item, variable=buttons[item])
			user_button.grid(row=(row_loop + (index_match(item)) - 1))
	row_loop = row_loop + session_option_count

label = Label(master, padx=10)
label.grid(row=row_loop)
label.config(text=str('\n\nAll Sessions:\n'))
row_loop += 1
select_all_sessionless = Button(master, text='Select All', command=selectall_sessionless).grid(row=row_loop)
row_loop += 1
unselect_all_sessionless = Button(master, text='Unselect All', command=unselectall_sessionless).grid(row=row_loop)
row_loop += 1

for list_option in list_base_options:
	for item in buttons:
		if list_option == item:
			buttons[item] = IntVar()
			user_button = Checkbutton(master, text=item, variable=buttons[item])
			user_button.grid(row=(row_loop + (index_match_no_session(item)) - 1))
	row_loop = row_loop + sessionless_option_count

label1 = Label(master, padx=10)
label1.grid(row=row_loop)
row_loop += 1
btn = Button(master, text="OK", command=end).grid(row=row_loop)
row_loop += 1
btn1 = Button(master, text="Cancel", command=exitscript).grid(row=row_loop)

master.update_idletasks()
windowheight = master.winfo_height()
windowwidth = master.winfo_width()
positionRight = int(screenwidth/2 - windowwidth/2)
positionDown = int(screenheight/2 - windowheight/2)
master.geometry("+%s+%s" % (positionRight, positionDown))

mainloop()

selection = []
for item in buttons_outcome:
	if buttons_outcome[item] == 1:
		selection.append(item)


download_selections = []
for item in selection:
	if "Download" in item:
		download_selections.append(item)

icarus_selections = []
for item in selection:
	if "Icarus" in item:
		icarus_selections.append(item)

convert_selections = []
for item in selection:
	if "Convert" in item:
		convert_selections.append(item)

nifti_selections = []
for item in selection:
	if "NIfTI" in item and not 'dcm2niix' in item:
		nifti_selections.append(item)

behavioral_selections = []
for item in selection:
	if "behavioral" in item:
		behavioral_selections.append(item)

timing_selections = []
for item in selection:
	if "timing" in item:
		timing_selections.append(item)


##########################################################
# ===Script Process Selection Checkbutton Follow-ups=== #
# Based on user's input for the selection checkboxes, confirms any potential errors
##########################################################
no_convert_count = 0
for session in range(1, number_of_sessions + 1):
	if "Reorganize Session %s NIfTI files" % session in nifti_selections and not "Convert Session %s DICOMs to NIfTI files (using dcm2niix)" % session in convert_selections:
		no_convert_count += 1

if no_convert_count > 0:
	root = Tk()  # create TKinter window
	root.title("NIfTI Check")
	root.geometry('+1070+500')  # sets the location of the window - format (+horiz+vert)
	root.wm_attributes("-topmost", 1)  # makes sure that the window appears on top of all other windows
	label = Label(root)
	label.pack()
	label.config(text=str(
		"For at least one session, you've chosen to reorganize NIfTI files without running the dcm2nii tool to create the NIfTI files.  Is this correct?"))
	button = Button(root, text='Yes - Continue', width=25, command=root.destroy)  # button closes window when pressed
	button.pack()
	button2 = Button(root, text='No - exit and reselect or manually run dcm2nii', width=40, command=sys.exit)
	button2.pack()

	root.update_idletasks()
	windowheight = root.winfo_height()
	windowwidth = root.winfo_width()
	positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
	positionDown = screeny + int(screenheight / 2 - windowheight / 2)
	root.geometry("+%s+%s" % (positionRight, positionDown))

	root.mainloop()

if icarus_selections:  # If any files are being backed up to Icarus
	root = Tk()  # create TKinter window
	root.title("VPN Check")
	root.geometry('+1070+500')  # sets the location of the window - format (+horiz+vert)
	root.wm_attributes("-topmost", 1)  # makes sure that the window appears on top of all other windows
	label = Label(root)
	label.pack()
	label.config(text=str(
		"You've chosen to to back up one or more files to Icarus.\n Please make sure you have connected to the VPN before clicking 'continue'"))
	button = Button(root, text='Continue', width=25, command=root.destroy)  # button closes window when pressed
	button.pack()

	root.update_idletasks()
	windowheight = root.winfo_height()
	windowwidth = root.winfo_width()
	positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
	positionDown = screeny + int(screenheight / 2 - windowheight / 2)
	root.geometry("+%s+%s" % (positionRight, positionDown))

	root.mainloop()


####################################################################################################################
# ===Participant Info Textbox=== #
# Presents user with textbox window to input basic participant info
####################################################################################################################

participant_number = None
vcnumbers = {}

if not use_participant_spreadsheet:
	entries = {}
	for item in download_selections:
		entries[item] = None
	entries_outcome = {}

def entry_fields():
	global participant_number, selection  # allows access to global variables so we can update them
	participant_number = e1.get()  # retrieves the response from the corresponding input box and assigns its value to the global variable
	if not use_participant_spreadsheet:
		for item in entries:
			entries_outcome[item] = entries[item].get()
	master.destroy()  # closes the text entry window after the "Submit" button has been pressed

def exitscript():
	sys.exit()


master = Tk()  # create TKinter window
master.title("Input info")
master.geometry('+1070+500')  # sets the location of the window - format (+horiz+vert)
master.wm_attributes("-topmost", 1)  # makes sure that the window appears on top of all other windows
if not use_participant_spreadsheet:
	Label(master, text="Note: if you are processing multiple participants,\n a Participant Spreadsheet MUST be used for VC numbers\n(i.e. you cannot enter them below).\n\n").grid(row=0, columnspan=2)
Label(master, text="Participant Number").grid(row=1, column=0)
e1 = Entry(master)  # creates textbox
e1.grid(row=1, column=1)  # sets textbox location in grid
e1.focus_set()
Label(master,
	  text="For a single participant, enter their number (e.g. '001').\nFor a range of participants, enter the range (e.g.'001-020').\n\n").grid(
	row=2, column=1)
row_loop = 3
if not use_participant_spreadsheet:
	for session in range(1, number_of_sessions + 1):
		for item in entries:
			if (" " + str(session)) in item:
				entries[item] = StringVar()
				Label(master, text="VC number - Session %s" % session).grid(row=row_loop, column=0)
				user_entry = Entry(master, textvariable=entries[item])
				user_entry.grid(row=row_loop, column=1)
				row_loop = row_loop + 2


Button(master, text='Submit', command=entry_fields).grid(row=row_loop, columnspan=2)  # create a "Submit" button that triggers the above "entry_fields" function
Button(master, text='Cancel', command=exitscript).grid(row=row_loop+1, columnspan=2)

master.update_idletasks()
windowheight = master.winfo_height()
windowwidth = master.winfo_width()
positionRight = int(screenwidth/2 - windowwidth/2)
positionDown = int(screenheight/2 - windowheight/2)
master.geometry("+%s+%s" % (positionRight, positionDown))

mainloop()

if not use_participant_spreadsheet:
	vcnumbers = entries_outcome


##########################################################
# ===Updating Participant Info=== #
##########################################################
set_range = []
if not "-" in participant_number:
	set_range = [int(participant_number)]  # input responses are read as strings; convert to integer
else:
	participant_split = participant_number.split("-")
	start = int(participant_split[0])
	end = int(participant_split[1]) + 1  # add one because of how python handles ranges
	set_range = range(start, end)


####################################################################################################################
####################################################################################################################
# ===Loop through all participants=== #
# If running the script one-at-a-time, this will only loop once
####################################################################################################################
####################################################################################################################

for participant_number in set_range:

	if participant_number in (range(1, 10)):  # create three-digit participant numbers e.g. 002, 012
		participant_00X = '00' + str(participant_number)
	else:
		participant_00X = '0' + str(participant_number)

	if use_participant_spreadsheet:  # if you are using the participant_spreadsheet to store data
		for item in spreadsheet_list:
			if item['participant_number'] == '' or "x" in item['participant_number'] or "y" in item['participant_number']:
				continue
			else:
				if int(item['participant_number']) == participant_number:
					selections_list = download_selections + icarus_selections
					for option in selections_list:
						for session in range(1, number_of_sessions + 1):
							if (" " + str(session)) in option:
								if not 'Session_%s' in vcnumbers:
									vcnumbers['Session_%s' % session] = item['vc_number%s' % session]


	####################################################################################################################
	# ===Create Initial Folders=== #
	# These creates the initial consistent file structure for this participant/session, according to BIDS format
	####################################################################################################################

	# Initializing these folder names, to be used by other scripts
	# These are transient folders (created to organize data, will be deleted later by script)

	if download_selections:  # if any data was selected to be downloaded
		Setup_BIDS_Folder_Structure.create_folders(folder, id_prefix, participant_00X, multi_session, number_of_sessions, download_selections)


	####################################################################################################################
	# ===Download Info Textbox Entry=== #
	# Presents user with textbox window to input login/password for CNDA
	####################################################################################################################

	"""
	At the time of writing this script, the automatic CNDA backup data files are what is being downloaded. If you choose
	to manually back data up to the CNDA, the file name includes the date of the session. Therefore, date info is included
	here; it is not used in the current version of the script, but can be implemented if needed.
	"""

	if download_selections or icarus_selections:  # if any data was selected to be downloaded or backed up
		date_list = []
		selections_list = download_selections + icarus_selections
		for session in range(1, number_of_sessions + 1):
			for item in selections_list:
				if (" " + str(session)) in item:
					if not 'Session_%s_Day' % session in date_list:
						date_list.append('Session_%s_Day' % session)
					if not 'Session_%s_Month' % session in date_list:
						date_list.append('Session_%s_Month' % session)
					if not 'Session_%s_Month' % session in date_list:
						date_list.append('Session_%s_Year' % session)

		entries = {}
		for item in date_list:
			entries[item] = None
		entries_outcome = {}

		day1 = None
		month1 = None
		year1 = None
		day2 = None
		month2 = None
		year2 = None


		if use_participant_spreadsheet:  # if you've chosen not to enter usernames, passwords, or participant scan info:
			pass
		else:  #otherwise...create input window
			def entry_fields2():
				for item in entries:
					entries_outcome[item] = entries[item].get()
				logins.destroy()  # closes the radiobutton window after the "Submit" button has been pressed


			def exitscript():
				sys.exit()


			logins = Tk()  # create TKinter window
			logins.title("Input login info")
			logins.geometry('+1070+500')  # sets the location of the radiobutton window - format (+horiz+vert)
			logins.wm_attributes("-topmost", 1)  # makes sure that the radiobutton window appears on top of all other windows

			row_loop = 0
			if not use_participant_spreadsheet:
				Label(logins).grid(row=row_loop)
				row_loop += 1
				Label(logins, text="Formatting examples:\n"
								   "Day:          '2', '31' (not zero-padded)\n"
								   "Month:      'Mar', 'Nov' (3-letter code)\n"
								   "Year:         '2017'", justify='left').grid(row=row_loop, columnspan=2)
				row_loop += 1
				for session in range(1, number_of_sessions + 1):
					for item in entries:
						if str(session) in item:
							if "Day" in item:
								entries[item] = StringVar()
								Label(logins, text="Session %s Day" % session).grid(row=row_loop, column=0)
								user_entry = Entry(logins, textvariable=entries[item])
								user_entry.grid(row=row_loop, column=1)
					for item in entries:
						if str(session) in item:
							if "Month" in item:
								entries[item] = StringVar()
								Label(logins, text="Session %s Month" % session).grid(row=row_loop+1, column=0)
								user_entry = Entry(logins, textvariable=entries[item])
								user_entry.grid(row=row_loop+1, column=1)
					for item in entries:
						if str(session) in item:
							if "Year" in item:
								entries[item] = StringVar()
								Label(logins, text="Session %s Year" % session).grid(row=row_loop+2, column=0)
								user_entry = Entry(logins, textvariable=entries[item])
								user_entry.grid(row=row_loop+2, column=1)
					Label(logins).grid(row=row_loop+3)
					row_loop = row_loop + 4

			Button(logins, text='Submit', command=entry_fields2).grid(row=row_loop, columnspan=2) # create a "Submit" button that triggers the above "entry_fields2" function
			Button(logins, text='Cancel', command=exitscript).grid(row=row_loop+1, columnspan=2)  # create a "Submit" button that triggers the above "entry_fields2" function

			logins.update_idletasks()
			windowheight = logins.winfo_height()
			windowwidth = logins.winfo_width()
			positionRight = screenx + int(screenwidth / 2 - windowwidth / 2)
			positionDown = screeny + int(screenheight / 2 - windowheight / 2)
			logins.geometry("+%s+%s" % (positionRight, positionDown))

			mainloop()


		##########################################################
		# ===Updating Login Info=== #
		##########################################################
		date_values = {}
		if use_participant_spreadsheet:  # if you are using the participant_spreadsheet to store data
			for item in spreadsheet_list:
				if item['participant_number'] == str(participant_number):
					for session in range(1, number_of_sessions + 1):
						if 'day%s' % session in item:
							date_values['Session_%s_Day' % session] = item['day%s' % session]
							date_values['Session_%s_Month' % session] = item['month%s' % session]
							date_values['Session_%s_Year' % session] = item['year%s' % session]
		else:
			date_values = entries_outcome


	####################################################################################################################
	####################################################################################################################
	# ===Neuroimaging Data=== #
	# All steps in this section will be automatically performed for each session.
	####################################################################################################################
	####################################################################################################################

	for session in range(1, number_of_sessions + 1):

		dicom_folder = None
		nifti_folder = None
		anat_folder = None
		func_folder = None
		fieldmap_folder = None


		if multi_session:
			dicom_folder = folder + "/sub-%s%s/ses-0%s" % (id_prefix, participant_00X, session) + "/DICOM"
			nifti_folder = folder + "/sub-%s%s/ses-0%s" % (id_prefix, participant_00X, session) + "/NIfTI"
			anat_folder = folder + "/sub-%s%s/ses-0%s" % (id_prefix, participant_00X, session) + "/anat"
			func_folder = folder + "/sub-%s%s/ses-0%s" % (id_prefix, participant_00X, session) + "/func"
			fieldmap_folder = folder + "/sub-%s%s/ses-0%s" % (id_prefix, participant_00X, session) + "/fmap"
		else:
			dicom_folder = folder + "/sub-%s%s" % (id_prefix, participant_00X) + "/DICOM"
			nifti_folder = folder + "/sub-%s%s" % (id_prefix, participant_00X) + "/NIfTI"
			anat_folder = folder + "/sub-%s%s" % (id_prefix, participant_00X) + "/anat"
			func_folder = folder + "/sub-%s%s" % (id_prefix, participant_00X) + "/func"
			fieldmap_folder = folder + "/sub-%s%s" % (id_prefix, participant_00X) + "/fmap"
		onsets_folder = folder + "/sub-%s%s" % (id_prefix, participant_00X) + "/AFNI_timing_files"

		####################################################################################################################
		# ===File download and Backup Upload=== #
		# Downloads DICOM file(s) from the CNDA and backs them up to Icarus
		####################################################################################################################

		##########################################################
		# ===Download DICOMs from CNDA=== #
		##########################################################

		if any(str(session) in x for x in download_selections):
			vcnumber = vcnumbers['Session_%s' % session]
			day = date_values['Session_%s_Day' % session]
			month = date_values['Session_%s_Month' % session]
			year = date_values['Session_%s_Year' % session]
			DICOM_Files.CNDA_download(show_notifications, multi_session, session, dicom_folder, id_prefix, participant_00X, vcnumber, CNDA_auto, CNDA_login, CNDA_password, project_name, day, month, year)


		##########################################################
		# ===Backup DICOM .zip file to Icarus=== #
		##########################################################

		if any(str(session) in x for x in icarus_selections):
			vcnumber = vcnumbers['Session_%s' % session]
			day = date_values['Session_%s_Day' % session]
			month = date_values['Session_%s_Month' % session]
			year = date_values['Session_%s_Year' % session]
			DICOM_Files.DICOM_backup(show_notifications, multi_session, session, Icarus_password, dicom_folder, id_prefix, participant_00X, vcnumber, Icarus_login, icarus_folder)


		####################################################################################################################
		# ===Conversion from DICOM to NIfTI Files & NIfTI File Reorganization=== #
		# This section runs the dcm2niix conversion tool, then reorganizes converted NIfTI files into the file structure
		# created previously in the script, following the BIDS format.
		####################################################################################################################

		if any((" " + str(session)) in x for x in convert_selections):
			NIfTI_Files.dcm2niix(show_notifications, multi_session, dicom_folder, nifti_folder, session, dcm2niix_folder)


		if any(str(session) in x for x in nifti_selections):
			NIfTI_Files.reorganize_NIfTI(multi_session, session, id_prefix, dicom_folder, nifti_folder, anat_folder, func_folder, fieldmap_folder, participant_00X, task_code)

		####################################################################################################################
		####################################################################################################################
		# ===Behavioral Data=== #
		####################################################################################################################
		####################################################################################################################


		####################################################################################################################
		# ===Coding Behavioral Data=== #
		# Codes participant responses, then creates a BIDS-format events file (.tsv)
		####################################################################################################################

		if any((" " + str(session)) in x for x in behavioral_selections):
			Generate_BIDS_Event_Files.code_data(session, multi_session, number_of_sessions, folder, func_folder, raw_behavioral_folder, participant_number, participant_00X, id_prefix)


	####################################################################################################################
	# ===Create AFNI Timing Files=== #
	# Pulls data from events files to create timing (onset) files formatted for AFNI
	####################################################################################################################

	if "Create timing Files" in selection:
		Create_AFNI_Timing_Files.create_AFNI_timing_files(number_of_sessions, multi_session, participant_00X, id_prefix, folder, onsets_folder)


####################################################################################################################
# ===Script Finish Announcement=== #
####################################################################################################################

root = Tk()  # create TKinter window
root.title("Script Finished")
root.geometry('+1070+500')  # sets the location of the window - format (+horiz+vert)
root.wm_attributes("-topmost", 1)  # makes sure that the window appears on top of all other windows
label = Label(root)
label.pack()
label.config(text=str(
	"The script has finished successfully! Please double-check your outputs."))
button = Button(root, text='Ok', width=25, command=root.destroy)  # button closes window when pressed
button.pack()

root.update_idletasks()
windowheight = root.winfo_height()
windowwidth = root.winfo_width()
positionRight = int(screenwidth/2 - windowwidth/2)
positionDown = int(screenheight/2 - windowheight/2)
root.geometry("+%s+%s" % (positionRight, positionDown))

root.mainloop()